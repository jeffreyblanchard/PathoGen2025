[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Human [Environmental] Pathogen [Meta]Genome Analysis Fall 2025",
    "section": "",
    "text": "“Metagnomes! They’re always on hand to help with mining sequence from those complicated microbiomes” - redpenblackpen by Jason Mcdermott\n\n\nThis is a rendering of files from the course repository for Biology 478/678 Pathogen Genome Analysis Lab taught at the University of Massachusetts Amherst by Prof. Jeffrey Blanchard."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Pathogen Genome Analysis Fall 2025",
    "section": "",
    "text": "Sept 3 (Wed) - Course Introduction & Lab 1: Introduction to Unity, R and RStudio\nSept 8 (Mon) - Discussion of research project possibilities\nSept 10 (Wed) - Lab 2: Coding in R with generative AI\nSept 15 (Mon) - Project background research - Adding references to Quarto documents using Zotero\nSept 17 (Wed) - Lab 3: Running bioinformatics software on Unity (Blast, Read mapping)\n\nSept 22 (Mon) - Discussion of project methods and the scope of what is possible (in 10 weeks)\nSept 24 (Wed) - Lab 4: NEON Data Transformation with dplyr\nSept 29 (Mon) - TBD\nOct 1 (Wed) - Lab 5: NEON Data Visualization with ggplot\nOct 6 (Mon) - TBD\nOct 8 (Wed) - Lab 6: Table joins of NEON MAG, metagenomic and chemistry data\nOct 13 (Mon) Holiday – Indigenous People’s Day\nOct 15 (Wed) - Lab 7: Geographic mapping the NEON data\nOct 20 (Mon) - Dr. Jennifer DeBruyn - All Ooze Considered\nOct 22 (Wed) - Lab 8: Genome representations\nOct 27 (Mon) - TBD\nOct 29 (Wed) - Lab 9: Phylogenetic tree visualization using ggtree\nNov 3 (Mon) - TBD\nNov 5 (Wed) - Lab 10: Read abundance - normalization and statistics\nNov 10 (Mon) - TBD\nNov 12 (Wed) - Lab 11: TBD based on research project directions\nNov 17 (Mon) - TBD\nNov 19 (Wed) - Lab 12: TBD based on research project directions\nNov 24 (Mon) - Research project workday\nNov 26 (Wed) Holiday - Thanksgiving\nDec 1 (Mon) - Research project workday\nDec 3 (Wed) - Research project presentations\nDec 8 (Mon) - Research project presentations"
  },
  {
    "objectID": "methods.html",
    "href": "methods.html",
    "title": "CURE Project Specific Methods",
    "section": "",
    "text": "phyloNEON\nAccess_NEON_Data_for_Metagenomics\nVisualizing NEON samples within a plot"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Project Space",
    "section": "",
    "text": "For our course projects we will work with the One Health framework. “One Health is a collaborative, multisectoral, and transdisciplinary approach — working at the local, regional, national, and global levels — with the goal of achieving optimal health outcomes recognizing the interconnection between people, animals, plants, and their shared environment.” -Center for Disease Control (CDC) One Health. In addition to the CDC One Health, the One Health perspective is supported by the One Health Commission (OHC), One Health Initiative, One Health Platform, CDC One Health Office, the Food and Agriculture Organization of the United Nations (FAO), the United Nations Environment Programme (UNEP), the World Organisation for Animal Health (WOAH, founded as OIE), and the World Health Organization (WHO) – One Health Joint Plan of Action, 2022–2026. “One Health issues include emerging, re-emerging, and endemic zoonotic diseases, neglected tropical diseases, vector-borne diseases, antimicrobial resistance, food safety and food security, environmental contamination, climate change and other health threats shared by people, animals, and the environment.” - Center for Disease Control (CDC) One Health\n\n\n\nOne Health - https://en.wikipedia.org/wiki/One_Health\n\n\n\n\n\nOur environmental data will come from the National Ecological Observatory Network (NEON) funded through the National Science Foundation. NEON’s mission is to “To collect and freely share critical ecological data, samples, and infrastructure with researchers and the public to advance understanding of ecological processes and inform the sustainable management of U.S. ecosystems.” NEON’s data are an important part of the One Health framework.\n\n\n\nNEON Field Sites - https://www.neonscience.org/field-sites/about-field-sites\n\n\nThe NEON Harvard Forest and Quabbin Watershed sites are of particular interest to us in Massachusetts. The Quabbin Reservoir is the primary water supply for Boston, 40 towns in the Greater Boston area and several surrounding towns. There is a rich history of the river valley. The name Quabbin, meaning meeting of many waters, is after Native American chief Nani-Quaben. Artifacts show that people (ancestors of the Nipmucs) were living in the Swift River Valley as far back as 12,000 years - Ref. Here is a timeline of events including the removal of the towns of Dana, Prescott, Enfield and Greenwich. Today the Massachusetts Department of Conservation and Recreation (DCR) manages the forests surrounding the watershed which provide a living green bio-filter. The watershed “catches the rain, stores it, and releases it slowly, soaking up nutrients, keeping erosion to a minimum, and yielding a consistent supply of clean water.”\n\n\n\nNEON Harvard Forest and Quabbin sites\n\n\nHere are some of the NEON data portals we may work with\n\nNEON Soils\nNEON Soil Microbes\nNEON Aquatic Microbes\nNEON Pathogens\nNEON Biorepository\n\n\n\n\nOur metagenomic data comes from a collaboration between NEON and the Joint Genome Institute at the Lawrence Berkeley National Laboratory and supported by the US Department of Energy. We can browse the data at the Integrated Microbial Genome & Metagenome (IMG/M) system which supports the annotation, analysis, and distribution of microbial genome and microbiome datasets sequenced at JGI.\nJGI has done all lot of data processing for us, but there is much still to do.\n\n\n\nDOE JGI Metagenome Workflow - https://journals.asm.org/doi/10.1128/msystems.00804-20"
  },
  {
    "objectID": "projects.html#one-health",
    "href": "projects.html#one-health",
    "title": "Project Space",
    "section": "",
    "text": "For our course projects we will work with the One Health framework. “One Health is a collaborative, multisectoral, and transdisciplinary approach — working at the local, regional, national, and global levels — with the goal of achieving optimal health outcomes recognizing the interconnection between people, animals, plants, and their shared environment.” -Center for Disease Control (CDC) One Health. In addition to the CDC One Health, the One Health perspective is supported by the One Health Commission (OHC), One Health Initiative, One Health Platform, CDC One Health Office, the Food and Agriculture Organization of the United Nations (FAO), the United Nations Environment Programme (UNEP), the World Organisation for Animal Health (WOAH, founded as OIE), and the World Health Organization (WHO) – One Health Joint Plan of Action, 2022–2026. “One Health issues include emerging, re-emerging, and endemic zoonotic diseases, neglected tropical diseases, vector-borne diseases, antimicrobial resistance, food safety and food security, environmental contamination, climate change and other health threats shared by people, animals, and the environment.” - Center for Disease Control (CDC) One Health\n\n\n\nOne Health - https://en.wikipedia.org/wiki/One_Health"
  },
  {
    "objectID": "projects.html#the-national-science-foudation-nsf-national-ecological-observatory-network-neon",
    "href": "projects.html#the-national-science-foudation-nsf-national-ecological-observatory-network-neon",
    "title": "Project Space",
    "section": "The National Science Foudation (NSF) National Ecological Observatory Network (NEON)",
    "text": "The National Science Foudation (NSF) National Ecological Observatory Network (NEON)\nOur environmental data will come from the National Ecological Observatory Network (NEON) funded by the National Science Foundation."
  },
  {
    "objectID": "projects.html#the-department-of-energy-doe-joint-genome-institute",
    "href": "projects.html#the-department-of-energy-doe-joint-genome-institute",
    "title": "Project Space",
    "section": "The Department of Energy (DOE) Joint Genome Institute",
    "text": "The Department of Energy (DOE) Joint Genome Institute\n\nOverview\nOur metagenomic data comes from a collaboration between NEON and the Joint Genome Institute at the Lawrence Berkeley National Laboratory and supported by the US Department of Energy. We can browse the data at the Integrated Microbial Genome & Metagenome (IMG/M) system which supports the annotation, analysis, and distribution of microbial genome and microbiome datasets sequenced at JGI.\n\n\nOur metagenome data\nWe will work with the Gs0166454 and Gs0161344 study sets. JGI has done all lot of data processing for us, but there is much still to do.\n\n\n\nDOE JGI Metagenome Workflow - https://journals.asm.org/doi/10.1128/msystems.00804-20"
  },
  {
    "objectID": "projects.html#the-national-ecological-observatory-network-neon",
    "href": "projects.html#the-national-ecological-observatory-network-neon",
    "title": "Project Space",
    "section": "The National Ecological Observatory Network (NEON)",
    "text": "The National Ecological Observatory Network (NEON)\n\nOverview\nOur environmental data will come from the National Ecological Observatory Network (NEON) funded through the National Science Foundation. NEON’s mission is to “To collect and freely share critical ecological data, samples, and infrastructure with researchers and the public to advance understanding of ecological processes and inform the sustainable management of U.S. ecosystems.” NEON’s data are an important part of the One Health framework.\n\n\n\nNEON Field Sites - https://www.neonscience.org/field-sites/about-field-sites\n\n\n\n\nNEON Harvard Forest and Quabbin Watershed sites\nThe NEON Harvard Forest and Quabbin Watershed sites are of particular interest to us in Massachusetts. The Quabbin Reservoir is the primary water supply for Boston, 40 towns in the Greater Boston area and several surrounding towns. There is a rich history of the river valley. The name Quabbin, meaning meeting of many waters, is after Native American chief Nani-Quaben. Artifacts show that people (ancestors of the Nipmucs) were living in the Swift River Valley as far back as 12,000 years - Ref. Here is a timeline of events including the removal of the towns of Dana, Prescott, Enfield and Greenwich. Today the Massachusetts Department of Conservation and Recreation (DCR) manages the forests surrounding the watershed which provide a living green bio-filter. The watershed “catches the rain, stores it, and releases it slowly, soaking up nutrients, keeping erosion to a minimum, and yielding a consistent supply of clean water.”\n\n\n\nNEON Harvard Forest and Quabbin sites\n\n\n\n\nNEON Data Portals\n\nNEON Soils\nNEON Soil Microbes\nNEON Aquatic Microbes\nNEON Pathogens\nNEON Biorepository"
  },
  {
    "objectID": "labs.html",
    "href": "labs.html",
    "title": "Labs",
    "section": "",
    "text": "Labs\n\nLab 1 : Overview & Getting Started\nLab 1s : Quarto\nLab 2 : Introduction to R, RStudio and Reproducible Reports\nLab 3 : Running bioinformatics software on Unity (Blast, Read mapping)\n\nLab 4 : NEON Data Transformation with dplyr\nLab 5 : NEON Data Visualization with ggplot\nLab 6 : Table joins of NEON MAG, metagenomic and chemistry data\nLab 7 : Mapping the NEON data\nLab 8: Genome representations\nLab 9 : Phylogenetic tree visualization using ggtree\nLab 10 : Read abundance - normalization and statistics\n\nSharing and Publishing\n\nLab : Connecting a Github repo site with a RStudio project\nLab : Adding references to your report with Zotero\nLab : Quarto Manuscripts\nLab : Building a 5 tab web site with Quarto\nLab : R Shiny\n\nManuscript\n\nPathoGen manuscript : Deadline Dec 10"
  },
  {
    "objectID": "report.html",
    "href": "report.html",
    "title": "Pathogen Genome Analysis Fall 2025",
    "section": "",
    "text": "Report\nManuscript style with Title Abstract Intro Methods Results Discussion Future Directions\nPublic communication Poems"
  },
  {
    "objectID": "projects.html#the-joint-genome-institute",
    "href": "projects.html#the-joint-genome-institute",
    "title": "Project Space",
    "section": "The Joint Genome Institute",
    "text": "The Joint Genome Institute\n\nOverview\nOur metagenomic data comes from a collaboration between NEON and the Joint Genome Institute at the Lawrence Berkeley National Laboratory and supported by the US Department of Energy. We can browse the data at the Integrated Microbial Genome & Metagenome (IMG/M) system which supports the annotation, analysis, and distribution of microbial genome and microbiome datasets sequenced at JGI.\n\n\nOur metagenome data\nWe will work with the Gs0166454 and Gs0161344 study sets. JGI has done all lot of data processing for us, but there is much still to do.\n\n\n\nDOE JGI Metagenome Workflow - https://journals.asm.org/doi/10.1128/msystems.00804-20"
  },
  {
    "objectID": "manuscripts.html",
    "href": "manuscripts.html",
    "title": "Manuscripts",
    "section": "",
    "text": "Should labs be in Manuscript form too?\nQuarto documentation on manuscripts https://quarto.org/docs/manuscripts/\nSee Quarto section on RStudio IDE for spell checking https://quarto.org/docs/visual-editor/content.html\nReproducible publishing with Quarto Dr. Mine Çetinkaya-Rundel Dr. Charlotte Wickham https://mine-cetinkaya-rundel.github.io/quarto-jsm24/4-manuscripts/4-manuscripts.html#/title-slide https://mine.quarto.pub/quarto-manuscripts-rmed/#/title-slide\nCut the tyranny of copy-and-paste with these coding tools https://www.nature.com/articles/d41586-022-00563-z\nNotebooks now! https://data.agu.org/notebooks-now/\nDecent example with references - https://jperkel.github.io/computed_quarto_manuscript/\nIntroducing eLife’s first computationally reproducible article https://elifesciences.org/labs/ad58f08d/introducing-elife-s-first-computationally-reproducible-article\nPioneering ‘live-code’ article allows scientists to play with each other’s results https://www.nature.com/articles/d41586-019-00724-7"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "A Zotero Workflow for R - https://www.anthonyschmidt.co/post/2021-10-25-a-zotero-workflow-for-r/"
  },
  {
    "objectID": "phyloNEON.html",
    "href": "phyloNEON.html",
    "title": "phyloNEON",
    "section": "",
    "text": "This is from https://github.com/NEONScience/phyloNEON/blob/main/README.md and https://github.com/NEONScience/phyloNEON/blob/main/docs/metagenomic/README.md\nA set of tools in R and Python to run phylogenetic and taxonomic analyses on NEON and related data"
  },
  {
    "objectID": "phyloNEON.html#installation",
    "href": "phyloNEON.html#installation",
    "title": "phyloNEON",
    "section": "Installation",
    "text": "Installation\nTo install phyloNEON, you will need the devtools package.\nlibrary(devtools)\n\ninstall_github(\"NEONScience/phyloNEON/phyloNEON\")"
  },
  {
    "objectID": "phyloNEON.html#accessing-and-using-neon-genetic-data",
    "href": "phyloNEON.html#accessing-and-using-neon-genetic-data",
    "title": "phyloNEON",
    "section": "Accessing and using NEON genetic data",
    "text": "Accessing and using NEON genetic data\nNEON offers several data products that include genetic data. This repository is being developed to include tools and guidelines to help users of NEON data to better utilize the genetic data.\n\nNEON metagenomic data\nDNA is extracted from NEON soil and aquatic samples and sequenced with a shotgun sequence library prep. Through collaborations with the Joint Genome Institute (JGI) and the National Microbime Collaborative Network (NMDC), most of the metagenomic sequencing data are available on the data portals of these organizations. Connections to these external data sources are being built into NEON data releases. The phyloNEON package also offers some tools and guidelines to help the user find and analyze NEON metagenomic data on the JGI/NMDC data portals.\nThis page on the repo (in docs/metagenomic/README.md) will help you get started"
  },
  {
    "objectID": "phyloNEON.html#accessing-neon-samples-on-the-jgi-img-data-portal",
    "href": "phyloNEON.html#accessing-neon-samples-on-the-jgi-img-data-portal",
    "title": "phyloNEON",
    "section": "Accessing NEON samples on the JGI IMG data portal",
    "text": "Accessing NEON samples on the JGI IMG data portal\n\nNEON metagenome database\nA table (neon.metaDB) has been added to the phyloNEON package that contains over 1,800 NEON metagenome samples that are on the JGI IMG data portal. This includes legacy data as well as all samples that are part of the JGI CSP award, which covers deep sequencing and analysis by JGI of all NEON metagenome samples collected in 2023 and 2024. Included in the table are several fields with JGI metadata and statistics for each sample, such as Sequencing Method, GenomeSize, GeneCount, and number of bins (metaBATbinCount). Also included are some NEON variables such as siteID and collectDate, as well as multiple environmental terms assigned to each sample according to ENVO specifications (e.g. Ecosystem Category, Ecosystem Type, Specific Ecosystem). The table also has reference codes for the Genome Online Database (GOLD), including GOLD Analysis Project ID and GOLD Study ID; and the taxon OID (imgGenomeID) that allows accessing the sample on the JGI IMG data portal.\nThis table is available when you load the package phyloNEON.\n\n\nR code\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(phyloNEON)\nlibrary(DT)\nlibrary(viridis)\n\n\nSave file to have version used\n\n\nR code\nwrite_csv(neon.metaDB, \"data/NEON_metadata/neon.metaDB_20250701.csv\")\n\n\nTo view the table neon.metaDB (Note set eval = FALSE or do not include in your R code or you will get an error when rendering)\n\n\nR code\nView(neon.metaDB)\n\n\nTo view the structure of the neon.metaDB\n\n\nR code\nstr(neon.metaDB)\n\n\ntibble [1,834 × 32] (S3: tbl_df/tbl/data.frame)\n $ dnaSampleID               : chr [1:1834] \"ONAQ_044-M-20190619-COMP-DNA1\" \"PUUM_031-O-20210104-COMP-DNA1\" \"TECR.20230821.EPILITHON.8.DNA-DNA1\" \"KONZ_003-M-20170710-COMP-DNA1\" ...\n $ imgGenomeID               : num [1:1834] 3.3e+09 3.3e+09 3.3e+09 3.3e+09 3.3e+09 ...\n $ jgiProjectID              : num [1:1834] NA NA 1506438 0 1500369 ...\n $ ITS Proposal ID           : num [1:1834] NA NA 509938 NA 509938 ...\n $ Sequencing Status         : chr [1:1834] \"Permanent Draft\" \"Permanent Draft\" \"Permanent Draft\" \"Permanent Draft\" ...\n $ Study Name                : chr [1:1834] \"Terrestrial soil microbial communities from various locations - NEON\" \"Terrestrial soil microbial communities from various locations - NEON\" \"Soil and water microbial communities from various NEON Field Sites across the United States\" \"Terrestrial soil microbial communities from various locations - NEON\" ...\n $ GenomeName                : chr [1:1834] \"Terrestrial soil microbial communities from Onaqui, Utah, USA - ONAQ_044-M-20190619-COMP-DNA1\" \"Terrestrial soil microbial communities from Puu Makaala Natural Area Reserve, Hawaii, USA - PUUM_031-O-20210104-COMP-DNA1\" \"Freshwater microbial communities from Teakettle 2 Creek NEON Field Site, Sierra National Forest, CA, USA - TECR\"| __truncated__ \"Terrestrial soil microbial communities from Konza Prairie Biological Station, Prairie Peninsula, KS, USA - KONZ\"| __truncated__ ...\n $ Sequencing Center         : chr [1:1834] \"Battelle Memorial Institute\" \"Battelle Memorial Institute\" \"DOE Joint Genome Institute  (JGI)\" \"Battelle Memorial Institute\" ...\n $ GOLD Analysis Project ID  : chr [1:1834] \"Ga0620072\" \"Ga0619546\" \"Ga0672972\" \"Ga0428256\" ...\n $ GOLD Analysis Project Type: chr [1:1834] \"Metagenome Analysis\" \"Metagenome Analysis\" \"Metagenome Analysis\" \"Metagenome Analysis\" ...\n $ GOLD Sequencing Project ID: chr [1:1834] \"Gp0766640\" \"Gp0766114\" \"Gp0812633\" \"Gp0476824\" ...\n $ GOLD Study ID             : chr [1:1834] \"Gs0144570\" \"Gs0144570\" \"Gs0166454\" \"Gs0144570\" ...\n $ Funding Program           : chr [1:1834] NA NA \"CSP\" NA ...\n $ Sequencing Method         : chr [1:1834] \"Illumina NextSeq 550\" \"Illumina NextSeq 550\" \"Illumina NovaSeq X 10B\" \"Illumina NextSeq 550\" ...\n $ Sequencing Quality        : chr [1:1834] \"Level 1: Standard Draft\" \"Level 1: Standard Draft\" \"Level 1: Standard Draft\" \"Level 1: Standard Draft\" ...\n $ siteID                    : chr [1:1834] \"ONAQ\" \"PUUM\" \"TECR\" \"KONZ\" ...\n $ collectDate               : chr [1:1834] \"20190619\" \"20210104\" \"20230821\" \"20170710\" ...\n $ Ecosystem                 : chr [1:1834] \"Environmental\" \"Environmental\" \"Environmental\" \"Environmental\" ...\n $ Ecosystem Category        : chr [1:1834] \"Terrestrial\" \"Terrestrial\" \"Aquatic\" \"Terrestrial\" ...\n $ Ecosystem Subtype         : chr [1:1834] \"Unclassified\" \"Forest\" \"Creek\" \"Unclassified\" ...\n $ Ecosystem Type            : chr [1:1834] \"Soil\" \"Soil\" \"Freshwater\" \"Soil\" ...\n $ Specific Ecosystem        : chr [1:1834] \"Unclassified\" \"Unclassified\" \"Unclassified\" \"Unclassified\" ...\n $ GenomeSize                : num [1:1834] 3.57e+06 8.86e+04 8.33e+08 2.23e+07 7.62e+08 ...\n $ GeneCount                 : num [1:1834] 11955 313 1296700 63840 1113040 ...\n $ ScaffoldCount             : num [1:1834] 10633 277 671686 56485 522571 ...\n $ metaBATbinCount           : num [1:1834] 0 0 11 0 23 5 0 7 0 0 ...\n $ eukCCbinCount             : num [1:1834] 0 0 2 0 2 0 0 0 0 0 ...\n $ estNumberGenomes          : num [1:1834] 0 0 147 0 151 215 0 132 0 0 ...\n $ avgGenomeSize             : num [1:1834] 0 0 5663975 0 5046004 ...\n $ numberFilteredReads       : num [1:1834] 0.00 0.00 1.87e+08 0.00 3.15e+08 ...\n $ numberMappedReads         : num [1:1834] 0.00 0.00 1.03e+08 0.00 2.78e+08 ...\n $ pctAssembledReads         : num [1:1834] 0 0 55.4 0 88.2 ...\n\n\nConvert the collectDate from character to date format\n\n\nR code\nneon.metaDB.my &lt;- neon.metaDB\nneon.metaDB.my$collectDate &lt;- as.numeric(neon.metaDB.my$collectDate)\nneon.metaDB.my$collectDate &lt;- ymd(neon.metaDB.my$collectDate)\nstr(neon.metaDB.my$collectDate)\n\n\n Date[1:1834], format: \"2019-06-19\" \"2021-01-04\" \"2023-08-21\" \"2017-07-10\" \"2023-07-12\" ...\n\n\n\n\nTable of mean genome size per year\n\n\nR code\nneon.metaDB.my |&gt; \n  filter(`GOLD Analysis Project Type` != \"Combined Assembly\") |&gt; \n  group_by(year = lubridate::year(collectDate)) |&gt; \n  summarize(mean_GenomeSize = mean(GenomeSize))\n\n\n# A tibble: 9 × 2\n   year mean_GenomeSize\n  &lt;dbl&gt;           &lt;dbl&gt;\n1  2013        8635723.\n2  2014        7670580.\n3  2016       16242281.\n4  2017       17172060.\n5  2018       14100181.\n6  2019       16735397.\n7  2020       37402350.\n8  2021     1334660078.\n9  2023     1310246892.\n\n\n\n\nTable HARV mean genome size per year\n\n\nR code\nneon.metaDB.my |&gt; \n  filter(siteID == \"HARV\") |&gt; \n  group_by(year = lubridate::year(collectDate)) |&gt; \n  summarize(mean_GenomeSize = mean(GenomeSize))\n\n\n# A tibble: 6 × 2\n   year mean_GenomeSize\n  &lt;dbl&gt;           &lt;dbl&gt;\n1  2013        4721159.\n2  2016       17096867.\n3  2017       29942423.\n4  2019       13990976.\n5  2020       30567005.\n6  2023     2236533461.\n\n\n\n\nPlot of genome size per year\n\n\nR code\nneon.metaDB.my |&gt; \n  ggplot(aes(x=collectDate, y = GenomeSize)) +\n  geom_col(colour = \"maroon\", fill = \"maroon\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nTo reformat dnasampleID column for terrestrial samples (This does not work for the aquatic samples)\n\n\nR code\nneon.metaDB.my.soil &lt;- neon.metaDB.my |&gt; \n  filter(`Ecosystem Category` == \"Terrestrial\") |&gt; \n  filter(`GOLD Analysis Project Type` != \"Combined Assembly\") |&gt; \n  \n  separate(`dnaSampleID`, c(\"dnaSampleID.site\",\"dnaSampleID.sub\"), \"_\", remove=FALSE) |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-COMP\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-GEN\", \"_GEN\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.sub\",\"dnaSampleID.type\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-M\", \"_M\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-O\", \"_O\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.plot\",\"dnaSampleID.sub\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"M-\", \"M_\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"O-\", \"O_\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.layer\",\"dnaSampleID.sub\"), \"_\") |&gt; \n\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-201\", \"201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-202\", \"202\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"201\", \"_201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"202\", \"_202\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.subplot\",\"dnaSampleID.date\"), \"_\") |&gt; \n\n  unite(plotID, c(dnaSampleID.site, dnaSampleID.plot), sep='_', remove=FALSE)\n\nneon.metaDB.my.soil$dnaSampleID.data &lt;- as.numeric(neon.metaDB.my.soil$dnaSampleID.date)\nneon.metaDB.my.soil$dnaSampleID.date &lt;- ymd(neon.metaDB.my.soil$dnaSampleID.date)\n\n\nTo reformat dnasampleID column for aquatic samples\n\n\nR code\nneon.metaDB.my.aquatic &lt;- neon.metaDB.my |&gt; \n  filter(`Ecosystem Category` == \"Aquatic\") |&gt; \n  filter(`GOLD Analysis Project Type` != \"Combined Assembly\") |&gt; \n  \n  mutate(dnaSampleID.sub = dnaSampleID) |&gt; \n  mutate_at(\"dnaSampleID.sub\", str_replace, \".202\", \"_202\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.site\",\"dnaSampleID.sub\"), \"_\") |&gt; \n  separate(`dnaSampleID.site`, c(\"dnaSampleID.site\",\"dnaSampleID.code\"), \"\\\\.\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \".DNA\", \"_DNA\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.sub\",\"dnaSampleID.type\"), \"_\") |&gt; \n  \n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.data\",\"dnaSampleID.niche\", \"dnaSampleID.num\"), \"\\\\.\") |&gt; \n\n  unite(dnaSampleID.niche, c(dnaSampleID.code, dnaSampleID.niche)) |&gt; \n  mutate_at(\"dnaSampleID.niche\", str_replace, \"NA_\", \"\") |&gt;\n  mutate_at(\"dnaSampleID.niche\", str_replace, \"_NA\", \"\")\n\n\n\n\nHARV metagenomes by year and plot\n\n\nR code\ndatatable(\nneon.metaDB.my.soil |&gt; \n  filter(siteID == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(collectDate), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = dnaSampleID.plot, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0)))\n)\n\n\n\n\n\n\n\n\nWREF metagenomes by year and plot\n\n\nR code\ndatatable(\nneon.metaDB.my.soil |&gt; \n  filter(siteID == \"WREF\") |&gt; \n  group_by(Year = lubridate::year(collectDate), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = dnaSampleID.plot, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0)))\n)\n\n\n\n\n\n\n\n\nPlot of HARV samples per plot per year\n\n\nR code\nneon.metaDB.my.soil |&gt; \n  filter(siteID == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(collectDate), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = dnaSampleID.plot, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0))) |&gt; \n  pivot_longer(!Year, names_to = \"plot\", values_to = \"metagenomes\") |&gt; \n  ggplot(aes(x=Year, y = plot)) +\n  geom_tile(aes(fill = metagenomes)) +\n  scale_fill_viridis(discrete=FALSE, direction = -1) +\n  scale_x_continuous(breaks = seq(2013, 2023, by = 1)) \n\n\n\n\n\n\n\n\n\n\n\nMissing years at HARV\nAll sites are missing data from 2021 and 2022. That should be in IMG soon. What about 2018?\n\nCollectDate\n\n\nR code\nneon.metaDB.my.soil |&gt; \n  group_by(Year = lubridate::year(collectDate)) |&gt; \n  count() \n\n\n# A tibble: 9 × 2\n# Groups:   Year [9]\n   Year     n\n  &lt;dbl&gt; &lt;int&gt;\n1  2013    63\n2  2014   106\n3  2016   229\n4  2017   326\n5  2018    45\n6  2019   231\n7  2020   185\n8  2021   117\n9  2023   303\n\n\n\n\ndnaSampleID.date\n\n\nR code\nneon.metaDB.my.soil |&gt; \n  group_by(Year = lubridate::year(dnaSampleID.date)) |&gt; \n  count() \n\n\n# A tibble: 9 × 2\n# Groups:   Year [9]\n   Year     n\n  &lt;dbl&gt; &lt;int&gt;\n1  2013    63\n2  2014   106\n3  2016   229\n4  2017   326\n5  2018    45\n6  2019   231\n7  2020   185\n8  2021   117\n9  2023   303\n\n\n\n\n\nPlot of samples per plot per year at all sites\n\n\nR code\nneon.metaDB.my.soil |&gt; \n  group_by(siteID, Year = lubridate::year(collectDate), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = Year, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0))) |&gt; \n  pivot_longer(!c(siteID, dnaSampleID.plot), names_to = \"Year\", values_to = \"metagenomes\") |&gt; \n  ggplot(aes(x=Year, y = dnaSampleID.plot)) +\n  geom_tile(aes(fill = metagenomes)) +\n  scale_fill_viridis(discrete=FALSE, direction = -1) +\n # scale_x_continuous(breaks = seq(2013, 2023, by = 1)) +\n  facet_wrap(~siteID, scales =\"free_y\", ncol = 3) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))"
  },
  {
    "objectID": "project_opps.html",
    "href": "project_opps.html",
    "title": "Project Opportunities",
    "section": "",
    "text": "We need to randomly pull 1/3 reads from each individual core then combinw, assemble and annotate\n\n\nhttps://www.neonscience.org/field-sites/harv\n\nHARV_001-O-20230705-COMP-DNA1\nHARV_002-O-20230706-COMP-DNA1\nHARV_004-O-20230705-COMP-DNA1\nHARV_005-O-20230710-COMP-DNA1\nHARV_013-O-20230704-COMP-DNA1\nHARV_021-O-20230706-COMP-DNA1\nHARV_033-O-20230703-COMP-DNA1\nHARV_035-O-20230704-COMP-DNA1\n\n\n\n\nhttps://www.neonscience.org/field-sites/sjer\n\nSJER_001-M-20230227-COMP-DNA1\nSJER_002-M-20230228-COMP-DNA1\nSJER_005-M-20230306-COMP-DNA1\nSJER_025-M-20230302-COMP-DNA1\nSJER_045-M-20230227-COMP-DNA1\nSJER_046-M-20230227-COMP-DNA1\n\n\n\n\n\nPossibility of combined assembly and mapping\n\n\n\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230117.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230221.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230419.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230620.DNA-DNA1\nFreshwater microbial communities from Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230719.DNA-DNA1 (version 2)\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230815.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20231017.DNA-DNA1\n\n\n\n\nhttps://www.neonscience.org/field-sites/cari\n\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230110.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230314.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230502.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230731.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230905.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20231031.DNA-DNA1"
  },
  {
    "objectID": "project_opps.html#projects",
    "href": "project_opps.html#projects",
    "title": "Project Opportunities",
    "section": "",
    "text": "We need to randomly pull 1/3 reads from each individual core then combinw, assemble and annotate\n\n\nhttps://www.neonscience.org/field-sites/harv\n\nHARV_001-O-20230705-COMP-DNA1\nHARV_002-O-20230706-COMP-DNA1\nHARV_004-O-20230705-COMP-DNA1\nHARV_005-O-20230710-COMP-DNA1\nHARV_013-O-20230704-COMP-DNA1\nHARV_021-O-20230706-COMP-DNA1\nHARV_033-O-20230703-COMP-DNA1\nHARV_035-O-20230704-COMP-DNA1\n\n\n\n\nhttps://www.neonscience.org/field-sites/sjer\n\nSJER_001-M-20230227-COMP-DNA1\nSJER_002-M-20230228-COMP-DNA1\nSJER_005-M-20230306-COMP-DNA1\nSJER_025-M-20230302-COMP-DNA1\nSJER_045-M-20230227-COMP-DNA1\nSJER_046-M-20230227-COMP-DNA1\n\n\n\n\n\nPossibility of combined assembly and mapping\n\n\n\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230117.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230221.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230419.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230620.DNA-DNA1\nFreshwater microbial communities from Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230719.DNA-DNA1 (version 2)\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230815.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20231017.DNA-DNA1\n\n\n\n\nhttps://www.neonscience.org/field-sites/cari\n\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230110.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230314.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230502.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230731.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230905.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20231031.DNA-DNA1"
  },
  {
    "objectID": "projects.html#overview",
    "href": "projects.html#overview",
    "title": "Project Space",
    "section": "",
    "text": "For our course projects we will work with the One Health framework. “One Health is a collaborative, multisectoral, and transdisciplinary approach — working at the local, regional, national, and global levels — with the goal of achieving optimal health outcomes recognizing the interconnection between people, animals, plants, and their shared environment.” -Center for Disease Control (CDC) One Health. In addition to the CDC One Health, the One Health perspective is supported by the One Health Commission (OHC), One Health Initiative, One Health Platform, CDC One Health Office, the Food and Agriculture Organization of the United Nations (FAO), the United Nations Environment Programme (UNEP), the World Organisation for Animal Health (WOAH, founded as OIE), and the World Health Organization (WHO) – One Health Joint Plan of Action, 2022–2026. “One Health issues include emerging, re-emerging, and endemic zoonotic diseases, neglected tropical diseases, vector-borne diseases, antimicrobial resistance, food safety and food security, environmental contamination, climate change and other health threats shared by people, animals, and the environment.” - Center for Disease Control (CDC) One Health\n\n\n\nOne Health - https://en.wikipedia.org/wiki/One_Health\n\n\n\n\n\nOur environmental data will come from the National Ecological Observatory Network (NEON) funded through the National Science Foundation. NEON’s mission is to “To collect and freely share critical ecological data, samples, and infrastructure with researchers and the public to advance understanding of ecological processes and inform the sustainable management of U.S. ecosystems.” NEON’s data are an important part of the One Health framework.\n\n\n\nNEON Field Sites - https://www.neonscience.org/field-sites/about-field-sites\n\n\nThe NEON Harvard Forest and Quabbin Watershed sites are of particular interest to us in Massachusetts. The Quabbin Reservoir is the primary water supply for Boston, 40 towns in the Greater Boston area and several surrounding towns. There is a rich history of the river valley. The name Quabbin, meaning meeting of many waters, is after Native American chief Nani-Quaben. Artifacts show that people (ancestors of the Nipmucs) were living in the Swift River Valley as far back as 12,000 years - Ref. Here is a timeline of events including the removal of the towns of Dana, Prescott, Enfield and Greenwich. Today the Massachusetts Department of Conservation and Recreation (DCR) manages the forests surrounding the watershed which provide a living green bio-filter. The watershed “catches the rain, stores it, and releases it slowly, soaking up nutrients, keeping erosion to a minimum, and yielding a consistent supply of clean water.”\n\n\n\nNEON Harvard Forest and Quabbin sites\n\n\nHere are some of the NEON data portals we may work with\n\nNEON Soils\nNEON Soil Microbes\nNEON Aquatic Microbes\nNEON Pathogens\nNEON Biorepository\n\n\n\n\nOur metagenomic data comes from a collaboration between NEON and the Joint Genome Institute at the Lawrence Berkeley National Laboratory and supported by the US Department of Energy. We can browse the data at the Integrated Microbial Genome & Metagenome (IMG/M) system which supports the annotation, analysis, and distribution of microbial genome and microbiome datasets sequenced at JGI.\nJGI has done all lot of data processing for us, but there is much still to do.\n\n\n\nDOE JGI Metagenome Workflow - https://journals.asm.org/doi/10.1128/msystems.00804-20"
  },
  {
    "objectID": "projects.html#our-project-space",
    "href": "projects.html#our-project-space",
    "title": "Project Space",
    "section": "Our Project Space",
    "text": "Our Project Space\nNEON has produced metagenomic data as data product since xx. The JGI annotated version is Gs0144570. However, these metagenomes do not have many reads. Give details\nLast year JGI and NEON collaborated to produce metagenomes which are xx deeper which allow for better assemble of reads into gene length and greater fragments. We will work with the NEON 2023 Gs0166454 and NEON 2021 Pilot - Gs0161344 study sets."
  },
  {
    "objectID": "projects.html#projects",
    "href": "projects.html#projects",
    "title": "Project Space",
    "section": "Projects",
    "text": "Projects\n\nSeparate Core vs Combined Core Metagenomes\nWe need to randomly pull 1/3 reads from each individual core then combine and assemble\n\nHarvard Forest & Quabbin (HARV), Worcester County, MA\nhttps://www.neonscience.org/field-sites/harv\n\nHARV_001-O-20230705-COMP-DNA1\nHARV_002-O-20230706-COMP-DNA1\nHARV_005-O-20230710-COMP-DNA1\nHARV_013-O-20230704-COMP-DNA1\nHARV_021-O-20230706-COMP-DNA1\nHARV_033-O-20230703-COMP-DNA1\nHARV_035-O-20230704-COMP-DNA1\n\n\n\nSan Joaquin Experimental Range (SJER), Madera County, CA\nhttps://www.neonscience.org/field-sites/sjer\n\nSJER_001-M-20230227-COMP-DNA1\nSJER_002-M-20230228-COMP-DNA1\nSJER_005-M-20230306-COMP-DNA1\nSJER_025-M-20230302-COMP-DNA1\nSJER_045-M-20230227-COMP-DNA1\nSJER_046-M-20230227-COMP-DNA1\n\n\n\n\nAquatic time series\nPossibility of combined assembly and mapping\n\nHop Brook, New Salem, MA (Quabbin)\nhttps://www.neonscience.org/field-sites/hopb\n\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230117.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230221.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230419.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230620.DNA-DNA1\nFreshwater microbial communities from Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230719.DNA-DNA1 (version 2)\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20230815.DNA-DNA1\nFreshwater microbial communities from Lower Hop Brook NEON Field Site, New Salem, MA, USA - HOPB.SS.20231017.DNA-DNA1\n\n\n\nCaribou Creek, Chatanika, Alaska\nhttps://www.neonscience.org/field-sites/cari\n\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230110.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230314.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230502.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230731.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20230905.DNA-DNA1\nFreshwater microbial communities from Caribou Creek NEON Field Site, Chatanika, Alaska, USA - CARI.SS.20231031.DNA-DNA1"
  },
  {
    "objectID": "Access_NEON_Data_for_Metagenomics.html",
    "href": "Access_NEON_Data_for_Metagenomics.html",
    "title": "Access NEON Data for Metagenomics",
    "section": "",
    "text": "From Access NEON Data for Metagenomics See * Update on the changing NEON microbial data * Soil microbe metagenome sequences\nInstall packages\n\n\nR code\ninstall.packages(\"neonUtilities\")\ninstall.packages(\"neonOS\")\n\n\n\n\nR code\nlibrary(neonUtilities)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(DT)\nlibrary(viridis)\n\n\n\n\nR code\nsoilTrialSites = c(\"BONA\",\"DEJU\",\"HEAL\",\"TOOL\",\"BARR\")\nsoilTrialSites = c(\"HARV\")\n\n\nsoilChem &lt;- loadByProduct(\n  dpID='DP1.10086.001',\n  startdate = \"2017-01\",\n  enddate = \"2019-12\",\n  check.size = FALSE,\n  site = soilTrialSites,\n  package='expanded')\n\n\n\n\nR code\nView(soilChem$sls_metagenomicsPooling)\n\n\n\n\nR code\nmetaGdata &lt;- loadByProduct(dpID = 'DP1.10107.001',\n\n                          check.size = FALSE,\n\n                          package = 'expanded') \n\n\n\n\nR code\nmetaGdata_mms_metagenomeSequencing &lt;- metaGdata$mms_metagenomeSequencing\nwrite_csv(metaGdata_mms_metagenomeSequencing, \"data/NEON_metadata/metaGdata_mms_metagenomeSequencing.csv\")\n\n\nThis has HARV data collected up until 2022. The 2021 and 2022 data are not in the phyloNEON data.\n\n\nR code\nmetaGdata_mms_metagenomeSequencing_HARV &lt;- metaGdata$mms_metagenomeSequencing |&gt; \nwrite_csv(metaGdata_mms_metagenomeSequencing_HARV, \"data/NEON_metadata/metaGdata_mms_metagenomeSequencing_HARV.csv\")\n\n\n\nRead in saved file (all above in eval = FALSE)\n\n\nR code\nmetaGdata_mms_metagenomeSequencing &lt;- read_csv(\"data/NEON_metadata/metaGdata_mms_metagenomeSequencing.csv\")\n\n\n\n\nCreate data frame from dnaSampleID\n\n\nR code\nmetaGdata_dnaSampleID &lt;- metaGdata_mms_metagenomeSequencing |&gt; \n  select(dnaSampleID)\n\n# Read in 2023 and 2024 data that is not in the metagenome data product yet\n\nneon_ay23_jgi_samples &lt;- read_csv(\"data/NEON_metadata/neon_ay23_jgi_samples_soil.csv\")\nneon_ay24_jgi_samples &lt;- read_csv(\"data/NEON_metadata/neon_ay24_jgi_samples_soil.csv\")\n\nneon_dnaSampleID &lt;- rbind(metaGdata_dnaSampleID, neon_ay23_jgi_samples, neon_ay24_jgi_samples)\n\n\n\nFull table\n\n\nR code\nneon_dnaSampleID_split &lt;- neon_dnaSampleID |&gt; \n\n  separate(`dnaSampleID`, c(\"dnaSampleID.site\",\"dnaSampleID.sub\"), \"_\", remove=FALSE) |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-comp\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-COMP\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-GEN\", \"_GEN\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.sub\",\"dnaSampleID.type\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-M\", \"_M\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-O\", \"_O\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.plot\",\"dnaSampleID.sub\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"M-\", \"M_\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"O-\", \"O_\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.layer\",\"dnaSampleID.sub\"), \"_\") |&gt; \n\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-201\", \"201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-202\", \"202\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2013\", \"_2013\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2014\", \"_2014\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2015\", \"_2015\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2016\", \"_2016\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2017\", \"_2017\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2018\", \"_2018\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2019\", \"_2019\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2020\", \"_2020\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2021\", \"_2021\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2022\", \"_2022\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2023\", \"_2023\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2024\", \"_2024\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.subplot\",\"dnaSampleID.date\"), \"_\") |&gt; \n\n  unite(plotID, c(dnaSampleID.site, dnaSampleID.plot), sep='_', remove=FALSE)\n\nneon_dnaSampleID_split$dnaSampleID.date &lt;- as.numeric(neon_dnaSampleID_split$dnaSampleID.date)\nneon_dnaSampleID_split$dnaSampleID.date &lt;- ymd(neon_dnaSampleID_split$dnaSampleID.date)\n\n\n\n\nFull table\n\n\nR code\nmetaGdata_mms_metagenomeSequencing &lt;- metaGdata_mms_metagenomeSequencing |&gt; \n\n  separate(`dnaSampleID`, c(\"dnaSampleID.site\",\"dnaSampleID.sub\"), \"_\", remove=FALSE) |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-comp\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-COMP\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-GEN\", \"_GEN\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.sub\",\"dnaSampleID.type\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-M\", \"_M\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-O\", \"_O\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.plot\",\"dnaSampleID.sub\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"M-\", \"M_\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"O-\", \"O_\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.layer\",\"dnaSampleID.sub\"), \"_\") |&gt; \n\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-201\", \"201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-202\", \"202\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"201\", \"_201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"202\", \"_202\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.subplot\",\"dnaSampleID.date\"), \"_\") |&gt; \n\n  unite(plotID, c(dnaSampleID.site, dnaSampleID.plot), sep='_', remove=FALSE)\n\nmetaGdata_mms_metagenomeSequencing$dnaSampleID.data &lt;- as.numeric(metaGdata_mms_metagenomeSequencing$dnaSampleID.date)\nmetaGdata_mms_metagenomeSequencing$dnaSampleID.date &lt;- ymd(metaGdata_mms_metagenomeSequencing$dnaSampleID.date)\n\n\n\n\n\nPlot of HARV samples per plot per year\n\n\nR code\nneon_dnaSampleID_split |&gt; \n  filter(dnaSampleID.site == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(dnaSampleID.date), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = dnaSampleID.plot, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0))) |&gt; \n  pivot_longer(!Year, names_to = \"plot\", values_to = \"metagenomes\") |&gt; \n  ggplot(aes(x=Year, y = plot)) +\n  geom_tile(aes(fill = metagenomes)) +\n  scale_fill_viridis(discrete=FALSE, direction = -1) +\n  scale_x_continuous(breaks = seq(2013, 2024, by = 1)) \n\n\n\n\n\n\n\n\n\n\n\nPlot of samples per plot per year at all sites\n\n\nR code\nneon_dnaSampleID_split |&gt; \n  group_by(dnaSampleID.site, Year = lubridate::year(dnaSampleID.date), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = Year, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0))) |&gt; \n  pivot_longer(!c(dnaSampleID.site, dnaSampleID.plot), names_to = \"Year\", values_to = \"metagenomes\") |&gt; \n  ggplot(aes(x=Year, y = dnaSampleID.plot)) +\n  geom_tile(aes(fill = metagenomes)) +\n  scale_fill_viridis(discrete=FALSE, direction = -1) +\n  facet_wrap(~dnaSampleID.site, scales =\"free_y\", ncol = 3) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) \n\n\n\n\n\n\n\n\n\n\n\nTable of mean sampleFilteredReadNumber\nAbout 3-5x increase in reads in 2021 and 2022 About 10-20x increase in 2023 over 2021 and 2022\n\n\nR code\nmetaGdata_mms_metagenomeSequencing |&gt; \n  filter(dnaSampleID.site == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(collectDate)) |&gt; \n  summarize(mean_sampleFilteredReadNumber = mean(sampleFilteredReadNumber))\n\n\n# A tibble: 8 × 2\n   Year mean_sampleFilteredReadNumber\n  &lt;dbl&gt;                         &lt;dbl&gt;\n1  2013                           NA \n2  2016                      6643162.\n3  2017                      5038437 \n4  2018                      2633512.\n5  2019                      4560748.\n6  2020                      3468523.\n7  2021                     16005210.\n8  2022                     19339618.\n\n\n\n\nTable of mean sampleTotalReadNumber\nAbout 3-5x increase in reads in 2021 and 2022 About 10-20x increase in 2023 over 2021 and 2022\n\n\nR code\nmetaGdata_mms_metagenomeSequencing |&gt; \n  filter(dnaSampleID.site == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(collectDate)) |&gt; \n  summarize(mean_sampleTotalReadNumber = mean(sampleTotalReadNumber))\n\n\n# A tibble: 8 × 2\n   Year mean_sampleTotalReadNumber\n  &lt;dbl&gt;                      &lt;dbl&gt;\n1  2013                   9270681.\n2  2016                  10802077.\n3  2017                  11456008.\n4  2018                   6664285.\n5  2019                   5442366.\n6  2020                   4674903 \n7  2021                  27270286.\n8  2022                  31374636."
  },
  {
    "objectID": "lab_AI_R.html",
    "href": "lab_AI_R.html",
    "title": "Learning R with the help of AI tools",
    "section": "",
    "text": "AI won’t take your job, but someone using who knows how to use AI might. Think of AI as a force multiplier. You have to learn to code first before you can use AI to help you. Y Combinator reports that over 25% of its startups are now relying on AI for 95% of their code base, while Google recently reported that about 25% of its new code is AI-generated.\nMicrosoft designed Copilot to work off of the latest version of OpenAI’s GPT model, GPT-4,\n\ngithub co-pilot - https://github.com/copilot\ngithub education - https://github.com/education\nRStudio github copilot - https://docs.posit.co/ide/user/ide/guide/tools/copilot.html\nMicrosoft Introduction to GitHub Copilot - https://learn.microsoft.com/en-us/training/modules/introduction-to-github-copilot/\nIntroduction to GitHub CoPilot videos - https://learn.microsoft.com/en-us/shows/introduction-to-github-copilot/\nSet up co-pilot for learning - https://docs.github.com/en/get-started/learning-to-code/setting-up-copilot-for-learning-to-code\nHow to write better prompts for GitHub Copilot - https://github.blog/developer-skills/github/how-to-write-better-prompts-for-github-copilot/\nAI Assisted Coding in RStudio - https://research-it.manchester.ac.uk/news/2024/11/29/ai-assisted-coding-in-rstudio/\nRTutor AI - https://rtutor.ai/\nSyntha AI - https://syntha.ai/code-generators/r\nR Code Generator - https://codingfleet.com/code-generator/r/\nLearning the tidyverse with the help of AI tools - https://www.tidyverse.org/blog/2025/04/learn-tidyverse-ai/\nIntroducing vitals, a toolkit for evaluating LLM products in R - https://www.tidyverse.org/blog/2025/06/vitals-0-1-0/\nUsing AI with R - https://rfortherestofus.com/courses/ai\nBoost Your R Skills with AI - https://artscience.ai/boost-your-r-skills-with-ai/\nBeginner’s Tutorial for the OpenAI API in R - https://tilburg.ai/2024/03/tutorial-openai-api-in-r/\nCodex - https://chatgpt.com/codex\n\nAI Assisted Coding in RStudio - https://research-it.manchester.ac.uk/news/2024/11/29/ai-assisted-coding-in-rstudio/ Integrating OpenAI’s ChatGPT into RStudio is now possible with “Chattr”, “GPT Studio” and “GitHub Copilot”. These new tools will help you find the right functions and commands and to quickly generate code snippets to save you time.\n8 ChatGPT packages for R - https://www.infoworld.com/article/2338386/8-chatgpt-tools-for-r-programming.html\n\nVibe coding https://www.geeksforgeeks.org/techtips/what-is-vibe-coding/\nWhat is vibe coding, exactly? - https://www.technologyreview.com/2025/04/16/1115135/what-is-vibe-coding-exactly/\nWhat Is Vibe Coding? Definition, Tools, Pros, and Cons - https://www.datacamp.com/blog/vibe-coding\nYou can use GitHub and Git to collaborate on work. https://docs.github.com/en/get-started/start-your-journey/about-github-and-git\nUsing co-pilot as your tutor - https://docs.github.com/en/get-started/learning-to-code/setting-up-copilot-for-learning-to-code\nchattr - https://mlverse.github.io/chattr/\n\nBioinformatics and AI * A data-intelligence-intensive bioinformatics copilot system for large-scale omics research and scientific insights - https://academic.oup.com/bib/article/26/4/bbaf312/8196318?login=true * Bioinformatics AI: Driving Future Biological Breakthroughs - https://biologyinsights.com/bioinformatics-ai-driving-future-biological-breakthroughs/"
  },
  {
    "objectID": "methods/phyloNEON.html",
    "href": "methods/phyloNEON.html",
    "title": "phyloNEON",
    "section": "",
    "text": "This is from https://github.com/NEONScience/phyloNEON/blob/main/README.md and https://github.com/NEONScience/phyloNEON/blob/main/docs/metagenomic/README.md\nA set of tools in R and Python to run phylogenetic and taxonomic analyses on NEON and related data"
  },
  {
    "objectID": "methods/phyloNEON.html#installation",
    "href": "methods/phyloNEON.html#installation",
    "title": "phyloNEON",
    "section": "Installation",
    "text": "Installation\nTo install phyloNEON, you will need the devtools package.\nlibrary(devtools)\n\ninstall_github(\"NEONScience/phyloNEON/phyloNEON\")"
  },
  {
    "objectID": "methods/phyloNEON.html#accessing-and-using-neon-genetic-data",
    "href": "methods/phyloNEON.html#accessing-and-using-neon-genetic-data",
    "title": "phyloNEON",
    "section": "Accessing and using NEON genetic data",
    "text": "Accessing and using NEON genetic data\nNEON offers several data products that include genetic data. This repository is being developed to include tools and guidelines to help users of NEON data to better utilize the genetic data.\n\nNEON metagenomic data\nDNA is extracted from NEON soil and aquatic samples and sequenced with a shotgun sequence library prep. Through collaborations with the Joint Genome Institute (JGI) and the National Microbime Collaborative Network (NMDC), most of the metagenomic sequencing data are available on the data portals of these organizations. Connections to these external data sources are being built into NEON data releases. The phyloNEON package also offers some tools and guidelines to help the user find and analyze NEON metagenomic data on the JGI/NMDC data portals.\nThis page on the repo (in docs/metagenomic/README.md) will help you get started"
  },
  {
    "objectID": "methods/phyloNEON.html#accessing-neon-samples-on-the-jgi-img-data-portal",
    "href": "methods/phyloNEON.html#accessing-neon-samples-on-the-jgi-img-data-portal",
    "title": "phyloNEON",
    "section": "Accessing NEON samples on the JGI IMG data portal",
    "text": "Accessing NEON samples on the JGI IMG data portal\n\nNEON metagenome database\nA table (neon.metaDB) has been added to the phyloNEON package that contains over 1,800 NEON metagenome samples that are on the JGI IMG data portal. This includes legacy data as well as all samples that are part of the JGI CSP award, which covers deep sequencing and analysis by JGI of all NEON metagenome samples collected in 2023 and 2024. Included in the table are several fields with JGI metadata and statistics for each sample, such as Sequencing Method, GenomeSize, GeneCount, and number of bins (metaBATbinCount). Also included are some NEON variables such as siteID and collectDate, as well as multiple environmental terms assigned to each sample according to ENVO specifications (e.g. Ecosystem Category, Ecosystem Type, Specific Ecosystem). The table also has reference codes for the Genome Online Database (GOLD), including GOLD Analysis Project ID and GOLD Study ID; and the taxon OID (imgGenomeID) that allows accessing the sample on the JGI IMG data portal.\nThis table is available when you load the package phyloNEON.\n\n\nR code\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(phyloNEON)\nlibrary(DT)\nlibrary(viridis)\n\n\nSave file to have version used\n\n\nR code\nwrite_csv(neon.metaDB, \"../data/NEON_metadata/neon.metaDB_20250701.csv\")\n\n\n\n\nR code\nneon.metaDB &lt;- read_csv(\"../data/NEON_metadata/neon.metaDB_20250701.csv\")\n\n\nTo view the table neon.metaDB (Note set eval = FALSE or do not include in your R code or you will get an error when rendering)\n\n\nR code\nView(neon.metaDB)\n\n\nTo view the structure of the neon.metaDB\n\n\nR code\nstr(neon.metaDB)\n\n\ntibble [1,834 × 32] (S3: tbl_df/tbl/data.frame)\n $ dnaSampleID               : chr [1:1834] \"ONAQ_044-M-20190619-COMP-DNA1\" \"PUUM_031-O-20210104-COMP-DNA1\" \"TECR.20230821.EPILITHON.8.DNA-DNA1\" \"KONZ_003-M-20170710-COMP-DNA1\" ...\n $ imgGenomeID               : num [1:1834] 3.3e+09 3.3e+09 3.3e+09 3.3e+09 3.3e+09 ...\n $ jgiProjectID              : num [1:1834] NA NA 1506438 0 1500369 ...\n $ ITS Proposal ID           : num [1:1834] NA NA 509938 NA 509938 ...\n $ Sequencing Status         : chr [1:1834] \"Permanent Draft\" \"Permanent Draft\" \"Permanent Draft\" \"Permanent Draft\" ...\n $ Study Name                : chr [1:1834] \"Terrestrial soil microbial communities from various locations - NEON\" \"Terrestrial soil microbial communities from various locations - NEON\" \"Soil and water microbial communities from various NEON Field Sites across the United States\" \"Terrestrial soil microbial communities from various locations - NEON\" ...\n $ GenomeName                : chr [1:1834] \"Terrestrial soil microbial communities from Onaqui, Utah, USA - ONAQ_044-M-20190619-COMP-DNA1\" \"Terrestrial soil microbial communities from Puu Makaala Natural Area Reserve, Hawaii, USA - PUUM_031-O-20210104-COMP-DNA1\" \"Freshwater microbial communities from Teakettle 2 Creek NEON Field Site, Sierra National Forest, CA, USA - TECR\"| __truncated__ \"Terrestrial soil microbial communities from Konza Prairie Biological Station, Prairie Peninsula, KS, USA - KONZ\"| __truncated__ ...\n $ Sequencing Center         : chr [1:1834] \"Battelle Memorial Institute\" \"Battelle Memorial Institute\" \"DOE Joint Genome Institute  (JGI)\" \"Battelle Memorial Institute\" ...\n $ GOLD Analysis Project ID  : chr [1:1834] \"Ga0620072\" \"Ga0619546\" \"Ga0672972\" \"Ga0428256\" ...\n $ GOLD Analysis Project Type: chr [1:1834] \"Metagenome Analysis\" \"Metagenome Analysis\" \"Metagenome Analysis\" \"Metagenome Analysis\" ...\n $ GOLD Sequencing Project ID: chr [1:1834] \"Gp0766640\" \"Gp0766114\" \"Gp0812633\" \"Gp0476824\" ...\n $ GOLD Study ID             : chr [1:1834] \"Gs0144570\" \"Gs0144570\" \"Gs0166454\" \"Gs0144570\" ...\n $ Funding Program           : chr [1:1834] NA NA \"CSP\" NA ...\n $ Sequencing Method         : chr [1:1834] \"Illumina NextSeq 550\" \"Illumina NextSeq 550\" \"Illumina NovaSeq X 10B\" \"Illumina NextSeq 550\" ...\n $ Sequencing Quality        : chr [1:1834] \"Level 1: Standard Draft\" \"Level 1: Standard Draft\" \"Level 1: Standard Draft\" \"Level 1: Standard Draft\" ...\n $ siteID                    : chr [1:1834] \"ONAQ\" \"PUUM\" \"TECR\" \"KONZ\" ...\n $ collectDate               : chr [1:1834] \"20190619\" \"20210104\" \"20230821\" \"20170710\" ...\n $ Ecosystem                 : chr [1:1834] \"Environmental\" \"Environmental\" \"Environmental\" \"Environmental\" ...\n $ Ecosystem Category        : chr [1:1834] \"Terrestrial\" \"Terrestrial\" \"Aquatic\" \"Terrestrial\" ...\n $ Ecosystem Subtype         : chr [1:1834] \"Unclassified\" \"Forest\" \"Creek\" \"Unclassified\" ...\n $ Ecosystem Type            : chr [1:1834] \"Soil\" \"Soil\" \"Freshwater\" \"Soil\" ...\n $ Specific Ecosystem        : chr [1:1834] \"Unclassified\" \"Unclassified\" \"Unclassified\" \"Unclassified\" ...\n $ GenomeSize                : num [1:1834] 3.57e+06 8.86e+04 8.33e+08 2.23e+07 7.62e+08 ...\n $ GeneCount                 : num [1:1834] 11955 313 1296700 63840 1113040 ...\n $ ScaffoldCount             : num [1:1834] 10633 277 671686 56485 522571 ...\n $ metaBATbinCount           : num [1:1834] 0 0 11 0 23 5 0 7 0 0 ...\n $ eukCCbinCount             : num [1:1834] 0 0 2 0 2 0 0 0 0 0 ...\n $ estNumberGenomes          : num [1:1834] 0 0 147 0 151 215 0 132 0 0 ...\n $ avgGenomeSize             : num [1:1834] 0 0 5663975 0 5046004 ...\n $ numberFilteredReads       : num [1:1834] 0.00 0.00 1.87e+08 0.00 3.15e+08 ...\n $ numberMappedReads         : num [1:1834] 0.00 0.00 1.03e+08 0.00 2.78e+08 ...\n $ pctAssembledReads         : num [1:1834] 0 0 55.4 0 88.2 ...\n\n\nConvert the collectDate from character to date format\n\n\nR code\nneon.metaDB.my &lt;- neon.metaDB\nneon.metaDB.my$collectDate &lt;- as.numeric(neon.metaDB.my$collectDate)\nneon.metaDB.my$collectDate &lt;- ymd(neon.metaDB.my$collectDate)\nstr(neon.metaDB.my$collectDate)\n\n\n Date[1:1834], format: \"2019-06-19\" \"2021-01-04\" \"2023-08-21\" \"2017-07-10\" \"2023-07-12\" ...\n\n\n\n\nTable of mean genome size per year\n\n\nR code\nneon.metaDB.my |&gt; \n  filter(`GOLD Analysis Project Type` != \"Combined Assembly\") |&gt; \n  group_by(year = lubridate::year(collectDate)) |&gt; \n  summarize(mean_GenomeSize = mean(GenomeSize))\n\n\n# A tibble: 9 × 2\n   year mean_GenomeSize\n  &lt;dbl&gt;           &lt;dbl&gt;\n1  2013        8635723.\n2  2014        7670580.\n3  2016       16242281.\n4  2017       17172060.\n5  2018       14100181.\n6  2019       16735397.\n7  2020       37402350.\n8  2021     1334660078.\n9  2023     1310246892.\n\n\n\n\nTable HARV mean genome size per year\n\n\nR code\nneon.metaDB.my |&gt; \n  filter(siteID == \"HARV\") |&gt; \n  group_by(year = lubridate::year(collectDate)) |&gt; \n  summarize(mean_GenomeSize = mean(GenomeSize))\n\n\n# A tibble: 6 × 2\n   year mean_GenomeSize\n  &lt;dbl&gt;           &lt;dbl&gt;\n1  2013        4721159.\n2  2016       17096867.\n3  2017       29942423.\n4  2019       13990976.\n5  2020       30567005.\n6  2023     2236533461.\n\n\n\n\nPlot of genome size per year\n\n\nR code\nneon.metaDB.my |&gt; \n  ggplot(aes(x=collectDate, y = GenomeSize)) +\n  geom_col(colour = \"maroon\", fill = \"maroon\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nTo reformat dnasampleID column for terrestrial samples (This does not work for the aquatic samples)\n\n\nR code\nneon.metaDB.my.soil &lt;- neon.metaDB.my |&gt; \n  filter(`Ecosystem Category` == \"Terrestrial\") |&gt; \n  filter(`GOLD Analysis Project Type` != \"Combined Assembly\") |&gt; \n  \n  separate(`dnaSampleID`, c(\"dnaSampleID.site\",\"dnaSampleID.sub\"), \"_\", remove=FALSE) |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-COMP\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-GEN\", \"_GEN\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.sub\",\"dnaSampleID.type\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-M\", \"_M\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-O\", \"_O\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.plot\",\"dnaSampleID.sub\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"M-\", \"M_\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"O-\", \"O_\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.layer\",\"dnaSampleID.sub\"), \"_\") |&gt; \n\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-201\", \"201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-202\", \"202\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"201\", \"_201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"202\", \"_202\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.subplot\",\"dnaSampleID.date\"), \"_\") |&gt; \n\n  unite(plotID, c(dnaSampleID.site, dnaSampleID.plot), sep='_', remove=FALSE)\n\nneon.metaDB.my.soil$dnaSampleID.data &lt;- as.numeric(neon.metaDB.my.soil$dnaSampleID.date)\nneon.metaDB.my.soil$dnaSampleID.date &lt;- ymd(neon.metaDB.my.soil$dnaSampleID.date)\n\n\nTo reformat dnasampleID column for aquatic samples\n\n\nR code\nneon.metaDB.my.aquatic &lt;- neon.metaDB.my |&gt; \n  filter(`Ecosystem Category` == \"Aquatic\") |&gt; \n  filter(`GOLD Analysis Project Type` != \"Combined Assembly\") |&gt; \n  \n  mutate(dnaSampleID.sub = dnaSampleID) |&gt; \n  mutate_at(\"dnaSampleID.sub\", str_replace, \".202\", \"_202\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.site\",\"dnaSampleID.sub\"), \"_\") |&gt; \n  separate(`dnaSampleID.site`, c(\"dnaSampleID.site\",\"dnaSampleID.code\"), \"\\\\.\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \".DNA\", \"_DNA\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.sub\",\"dnaSampleID.type\"), \"_\") |&gt; \n  \n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.data\",\"dnaSampleID.niche\", \"dnaSampleID.num\"), \"\\\\.\") |&gt; \n\n  unite(dnaSampleID.niche, c(dnaSampleID.code, dnaSampleID.niche)) |&gt; \n  mutate_at(\"dnaSampleID.niche\", str_replace, \"NA_\", \"\") |&gt;\n  mutate_at(\"dnaSampleID.niche\", str_replace, \"_NA\", \"\")\n\n\n\n\nHARV metagenomes by year and plot\n\n\nR code\ndatatable(\nneon.metaDB.my.soil |&gt; \n  filter(siteID == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(collectDate), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = dnaSampleID.plot, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0)))\n)\n\n\n\n\n\n\n\n\nWREF metagenomes by year and plot\n\n\nR code\ndatatable(\nneon.metaDB.my.soil |&gt; \n  filter(siteID == \"WREF\") |&gt; \n  group_by(Year = lubridate::year(collectDate), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = dnaSampleID.plot, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0)))\n)\n\n\n\n\n\n\n\n\nPlot of HARV samples per plot per year\n\n\nR code\nneon.metaDB.my.soil |&gt; \n  filter(siteID == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(collectDate), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = dnaSampleID.plot, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0))) |&gt; \n  pivot_longer(!Year, names_to = \"plot\", values_to = \"metagenomes\") |&gt; \n  ggplot(aes(x=Year, y = plot)) +\n  geom_tile(aes(fill = metagenomes)) +\n  scale_fill_viridis(discrete=FALSE, direction = -1) +\n  scale_x_continuous(breaks = seq(2013, 2023, by = 1)) \n\n\n\n\n\n\n\n\n\n\n\nMissing years at HARV\nAll sites are missing data from 2021 and 2022. That should be in IMG soon. What about 2018?\n\nCollectDate\n\n\nR code\nneon.metaDB.my.soil |&gt; \n  group_by(Year = lubridate::year(collectDate)) |&gt; \n  count() \n\n\n# A tibble: 9 × 2\n# Groups:   Year [9]\n   Year     n\n  &lt;dbl&gt; &lt;int&gt;\n1  2013    63\n2  2014   106\n3  2016   229\n4  2017   326\n5  2018    45\n6  2019   231\n7  2020   185\n8  2021   117\n9  2023   303\n\n\n\n\ndnaSampleID.date\n\n\nR code\nneon.metaDB.my.soil |&gt; \n  group_by(Year = lubridate::year(dnaSampleID.date)) |&gt; \n  count() \n\n\n# A tibble: 9 × 2\n# Groups:   Year [9]\n   Year     n\n  &lt;dbl&gt; &lt;int&gt;\n1  2013    63\n2  2014   106\n3  2016   229\n4  2017   326\n5  2018    45\n6  2019   231\n7  2020   185\n8  2021   117\n9  2023   303\n\n\n\n\n\nPlot of samples per plot per year at all sites\n\n\nR code\nneon.metaDB.my.soil |&gt; \n  group_by(siteID, Year = lubridate::year(collectDate), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = Year, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0))) |&gt; \n  pivot_longer(!c(siteID, dnaSampleID.plot), names_to = \"Year\", values_to = \"metagenomes\") |&gt; \n  ggplot(aes(x=Year, y = dnaSampleID.plot)) +\n  geom_tile(aes(fill = metagenomes)) +\n  scale_fill_viridis(discrete=FALSE, direction = -1) +\n # scale_x_continuous(breaks = seq(2013, 2023, by = 1)) +\n  facet_wrap(~siteID, scales =\"free_y\", ncol = 3) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))"
  },
  {
    "objectID": "methods/Access_NEON_Data_for_Metagenomics.html",
    "href": "methods/Access_NEON_Data_for_Metagenomics.html",
    "title": "Access NEON Data for Metagenomics",
    "section": "",
    "text": "From Access NEON Data for Metagenomics See * Update on the changing NEON microbial data * Soil microbe metagenome sequences\nInstall packages\n\n\nR code\ninstall.packages(\"neonUtilities\")\ninstall.packages(\"neonOS\")\n\n\n\n\nR code\nlibrary(neonUtilities)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(DT)\nlibrary(viridis)\n\n\n\n\nR code\nsoilTrialSites = c(\"BONA\",\"DEJU\",\"HEAL\",\"TOOL\",\"BARR\")\nsoilTrialSites = c(\"HARV\")\n\n\nsoilChem &lt;- loadByProduct(\n  dpID='DP1.10086.001',\n  startdate = \"2017-01\",\n  enddate = \"2019-12\",\n  check.size = FALSE,\n  site = soilTrialSites,\n  package='expanded')\n\n\n\n\nR code\nView(soilChem$sls_metagenomicsPooling)\n\n\n\n\nR code\nmetaGdata &lt;- loadByProduct(dpID = 'DP1.10107.001',\n\n                          check.size = FALSE,\n\n                          package = 'expanded') \n\n\n\n\nR code\nmetaGdata_mms_metagenomeSequencing &lt;- metaGdata$mms_metagenomeSequencing\nwrite_csv(metaGdata_mms_metagenomeSequencing, \"../data/NEON_metadata/metaGdata_mms_metagenomeSequencing.csv\")\n\n\nThis has HARV data collected up until 2022. The 2021 and 2022 data are not in the phyloNEON data.\n\n\nR code\nmetaGdata_mms_metagenomeSequencing_HARV &lt;- metaGdata$mms_metagenomeSequencing |&gt; \nwrite_csv(metaGdata_mms_metagenomeSequencing_HARV, \"../data/NEON_metadata/metaGdata_mms_metagenomeSequencing_HARV.csv\")\n\n\n\nRead in saved file (all above in eval = FALSE)\n\n\nR code\nmetaGdata_mms_metagenomeSequencing &lt;- read_csv(\"../data/NEON_metadata/metaGdata_mms_metagenomeSequencing.csv\")\n\n\n\n\nCreate data frame from dnaSampleID\n\n\nR code\nmetaGdata_dnaSampleID &lt;- metaGdata_mms_metagenomeSequencing |&gt; \n  select(dnaSampleID)\n\n# Read in 2023 and 2024 data that is not in the metagenome data product yet\n\nneon_ay23_jgi_samples &lt;- read_csv(\"../data/NEON_metadata/neon_ay23_jgi_samples_soil.csv\")\nneon_ay24_jgi_samples &lt;- read_csv(\"../data/NEON_metadata/neon_ay24_jgi_samples_soil.csv\")\n\nneon_dnaSampleID &lt;- rbind(metaGdata_dnaSampleID, neon_ay23_jgi_samples, neon_ay24_jgi_samples)\n\n\n\nFull table\n\n\nR code\nneon_dnaSampleID_split &lt;- neon_dnaSampleID |&gt; \n\n  separate(`dnaSampleID`, c(\"dnaSampleID.site\",\"dnaSampleID.sub\"), \"_\", remove=FALSE) |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-comp\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-COMP\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-GEN\", \"_GEN\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.sub\",\"dnaSampleID.type\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-M\", \"_M\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-O\", \"_O\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.plot\",\"dnaSampleID.sub\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"M-\", \"M_\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"O-\", \"O_\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.layer\",\"dnaSampleID.sub\"), \"_\") |&gt; \n\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-201\", \"201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-202\", \"202\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2013\", \"_2013\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2014\", \"_2014\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2015\", \"_2015\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2016\", \"_2016\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2017\", \"_2017\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2018\", \"_2018\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2019\", \"_2019\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2020\", \"_2020\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2021\", \"_2021\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2022\", \"_2022\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2023\", \"_2023\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"2024\", \"_2024\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.subplot\",\"dnaSampleID.date\"), \"_\") |&gt; \n\n  unite(plotID, c(dnaSampleID.site, dnaSampleID.plot), sep='_', remove=FALSE)\n\nneon_dnaSampleID_split$dnaSampleID.date &lt;- as.numeric(neon_dnaSampleID_split$dnaSampleID.date)\nneon_dnaSampleID_split$dnaSampleID.date &lt;- ymd(neon_dnaSampleID_split$dnaSampleID.date)\n\n\n\n\nFull table\n\n\nR code\nmetaGdata_mms_metagenomeSequencing &lt;- metaGdata_mms_metagenomeSequencing |&gt; \n\n  separate(`dnaSampleID`, c(\"dnaSampleID.site\",\"dnaSampleID.sub\"), \"_\", remove=FALSE) |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-comp\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-COMP\", \"_COMP\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-GEN\", \"_GEN\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.sub\",\"dnaSampleID.type\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-M\", \"_M\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-O\", \"_O\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.plot\",\"dnaSampleID.sub\"), \"_\") |&gt; \n  \n  mutate_at(\"dnaSampleID.sub\", str_replace, \"M-\", \"M_\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"O-\", \"O_\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.layer\",\"dnaSampleID.sub\"), \"_\") |&gt; \n\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-201\", \"201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"-202\", \"202\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"201\", \"_201\") |&gt;\n  mutate_at(\"dnaSampleID.sub\", str_replace, \"202\", \"_202\") |&gt;\n  separate(`dnaSampleID.sub`, c(\"dnaSampleID.subplot\",\"dnaSampleID.date\"), \"_\") |&gt; \n\n  unite(plotID, c(dnaSampleID.site, dnaSampleID.plot), sep='_', remove=FALSE)\n\nmetaGdata_mms_metagenomeSequencing$dnaSampleID.data &lt;- as.numeric(metaGdata_mms_metagenomeSequencing$dnaSampleID.date)\nmetaGdata_mms_metagenomeSequencing$dnaSampleID.date &lt;- ymd(metaGdata_mms_metagenomeSequencing$dnaSampleID.date)\n\n\n\n\n\nPlot of HARV samples per plot per year\n\n\nR code\nneon_dnaSampleID_split |&gt; \n  filter(dnaSampleID.site == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(dnaSampleID.date), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = dnaSampleID.plot, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0))) |&gt; \n  pivot_longer(!Year, names_to = \"plot\", values_to = \"metagenomes\") |&gt; \n  ggplot(aes(x=Year, y = plot)) +\n  geom_tile(aes(fill = metagenomes)) +\n  scale_fill_viridis(discrete=FALSE, direction = -1) +\n  scale_x_continuous(breaks = seq(2013, 2024, by = 1)) \n\n\n\n\n\n\n\n\n\n\n\nPlot of samples per plot per year at all sites\n\n\nR code\nneon_dnaSampleID_split |&gt; \n  group_by(dnaSampleID.site, Year = lubridate::year(dnaSampleID.date), dnaSampleID.plot) |&gt; \n  count() |&gt; \n  pivot_wider(names_from = Year, values_from = n) |&gt; \n  mutate_all(funs(replace_na(.,0))) |&gt; \n  pivot_longer(!c(dnaSampleID.site, dnaSampleID.plot), names_to = \"Year\", values_to = \"metagenomes\") |&gt; \n  ggplot(aes(x=Year, y = dnaSampleID.plot)) +\n  geom_tile(aes(fill = metagenomes)) +\n  scale_fill_viridis(discrete=FALSE, direction = -1) +\n  facet_wrap(~dnaSampleID.site, scales =\"free_y\", ncol = 3) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) \n\n\n\n\n\n\n\n\n\n\n\nTable of mean sampleFilteredReadNumber\nAbout 3-5x increase in reads in 2021 and 2022 About 10-20x increase in 2023 over 2021 and 2022\n\n\nR code\nmetaGdata_mms_metagenomeSequencing |&gt; \n  filter(dnaSampleID.site == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(collectDate)) |&gt; \n  summarize(mean_sampleFilteredReadNumber = mean(sampleFilteredReadNumber))\n\n\n# A tibble: 8 × 2\n   Year mean_sampleFilteredReadNumber\n  &lt;dbl&gt;                         &lt;dbl&gt;\n1  2013                           NA \n2  2016                      6643162.\n3  2017                      5038437 \n4  2018                      2633512.\n5  2019                      4560748.\n6  2020                      3468523.\n7  2021                     16005210.\n8  2022                     19339618.\n\n\n\n\nTable of mean sampleTotalReadNumber\nAbout 3-5x increase in reads in 2021 and 2022 About 10-20x increase in 2023 over 2021 and 2022\n\n\nR code\nmetaGdata_mms_metagenomeSequencing |&gt; \n  filter(dnaSampleID.site == \"HARV\") |&gt; \n  group_by(Year = lubridate::year(collectDate)) |&gt; \n  summarize(mean_sampleTotalReadNumber = mean(sampleTotalReadNumber))\n\n\n# A tibble: 8 × 2\n   Year mean_sampleTotalReadNumber\n  &lt;dbl&gt;                      &lt;dbl&gt;\n1  2013                   9270681.\n2  2016                  10802077.\n3  2017                  11456008.\n4  2018                   6664285.\n5  2019                   5442366.\n6  2020                   4674903 \n7  2021                  27270286.\n8  2022                  31374636."
  },
  {
    "objectID": "labs/lab1_overview.html",
    "href": "labs/lab1_overview.html",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "What is bioinformatics?\nWhat is reproducible research?\nWhy learn bioinformatics and data science skills?\nHigh Performance Computing (Unity)\nOverview of the R statistical programming language\n\n\n\n\nIn recent years, the field of genomic analysis and bioinformatics has sifted towards requiring some knowledge of R, Python/Perl/C and the use of high performance computers (often requiring some fundamental Unix skills) available at national computing centers for working with large data sets. While there are many great software packages available for particular computational problems in evolutionary biology, many software programs do not have a user interface (e.g. drop down menus and such) and are run in command line mode. The lab sessions in this course have been designed to give students an introduction to working with R and packages used for genome and metagenome analyses. We are using recently release National Ecological Observatory Network data to design a course-based Undergraduate Research Experience (CURE). The first 4 weeks we will discuss to project space, discuss research ideas and formulate testable hypothesis or discovery driven approaches, design the experimental approaches. For a preview today I will give an overview of the project space.\n\n\n\nBioinformatics is the field of science in which biology, computer science, statistics and information technology merge into a single discipline. There are three important sub-disciplines within bioinformatics:\n\nThe development of new algorithms and statistics with which to assess relationships among members of large data sets.\nThe development and implementation of tools that enable efficient access and management of different types of information.\nThe analysis and interpretation of various types of data including nucleotide and amino acid sequences, protein domains, and protein structures.\n\n\n\n\nis a term coined in response to the high demand of techniques and resources for handling the explosion of molecular data.\nis a buzzword to describe a growing field.\nbenefits from the physicists, chemists and mathematicians crossing over into biology.\nis a collection of tools.\nis way of thinking about a problem!\n\n\n\n\nIn order to make new algorithms and data sources available to biologists someone needs to write applications that include these algorithms and create new databases. Often this is first done by academic research groups. Later redone by private companies when market is large and profitable enough. There is a large gap between what is done by research groups and companies. Sometimes this is filled by large government funded projects, but not usually in time for most researchers. This is why bioinformatics and programming skills have become very valuable.\n\n\n\n\nThe field of data science has grown tremendously over the last decade and the two programming languages, R and Python, used in analyzing genomic data are the most popular languages for data science. This made it easy to transfer bioinformatics skills to diverse fields.\nHere a few links that I will go over in lab:\n\nWhat is Data Science? \n\nWhat is Data Science? 8 Skills That Will Get You Hired\n\nOpen Science is Kinder Science\n\nData Carpentry\n\nBuilding a local community of practice in scientific programming for life scientists\n\n\n\n\nR is the largest and most comprehensive public domain statistical computing environment. The core R package is enhanced by several hundred user-supplied add-on packages, including many for gene expression analysis, in the  Comprehensive R Archive Network (CRAN). Omegahat Project for Statistical Computing.  BioConductor is an open source and open development software project for the analysis and comprehension of genomic data and is based primarily on the R programming language. R and Bioconductor are free, Open Source and available for Windows, MacOS and a wide variety of UNIX platforms.\n\n\nReproducibility is the hallmark of science, which is based on empirical observations coupled with explanatory models. While reproducibility encompasses the full science lifecycle, and includes issues such as methodological consistency and treatment of bias, in this course we will focus on computational reproducibility: the ability to document data, analyses, and models sufficiently for other researchers to be able to understand and ideally re-execute the computations that lead to scientific results and conclusions. With current publishing practices, this can be difficult because data are typically unavailable, the method sections of papers do not detail the computational approaches used, and analyses and models are often conducted in graphical programs, or, when scripted analyses are employed, the code is not available. In this course we will learn how to write code that is integrated into reproducible reports.\n\n\n\nMany introductory and advance tutorials have been developed for R. Here are a few\n\nThe offical R manuals\nCRAN’s Introduction to R\nR for Data Science by Garrett Grolemund and Hadley Wickham\nR Graphics Cookbook by Winston Chang\nData Carpentries Genomic Workshop Sessions\nData Analysis and Visualization in R for Ecologists\n\nThere are also many workshops and online R courses that you could take to follow up what you learn in this class.\n\n\n\n\nGitHub has become a popular way to manage, share and view code for open source projects. The tutorials created for this course will be written in Quarto and posted on GitHub. Thus, you will be able to continue to see course materials after the end of the semester. You will use and make a GitHub web site for your research project.\n\n\n\nYou all are part of the first generation of generative AI users. The saying goes “AI won’t take your job, but someone using who knows how to use AI might.” Think of AI as a force multiplier. You have to learn to code and clearly state your problems before AI can to help you. This class will fully use generative AI in hopes that it will challenge us to think more creatively about problems and not stress out about syntax. Think first…ask questions…code…solve problem! We will use the UMass version of Microsoft Copilot Chat and Copilot integrated into RStudio. We will embrace “Vibe coding” (see What is Vibe Coding, Exactly?) and ride the waves.\n\n\n\nIn this course we will learn to write basic unix commands, run bioinformatics software from the command line and allocate computer resources for submitting large jobs. UMass has modern High Performance Computing system, Unity, and excellent staff members to help get you going and trouble shoot issues. Working on HPCs has become much easier with the advent of web interfaces that look and work much like software running on your computer.\n\n\n\nYou can do all of the R-based labs on your own computer. Follow these directions by the makers of RStudio, Posit. You will need to download the lab files from Unity or the course GitHub site."
  },
  {
    "objectID": "labs/lab_AI_R.html",
    "href": "labs/lab_AI_R.html",
    "title": "Learning R with the help of AI tools",
    "section": "",
    "text": "AI won’t take your job, but someone using who knows how to use AI might. Think of AI as a force multiplier. You have to learn to code first before you can use AI to help you. Google recently reported that about 25% of its new code is AI-generated.\nMicrosoft designed Copilot to work off of the latest version of OpenAI’s GPT model, GPT-4,\n\ngithub co-pilot - https://github.com/copilot\ngithub education - https://github.com/education\nRStudio github copilot - https://docs.posit.co/ide/user/ide/guide/tools/copilot.html\nMicrosoft Introduction to GitHub Copilot - https://learn.microsoft.com/en-us/training/modules/introduction-to-github-copilot/\nIntroduction to GitHub CoPilot videos - https://learn.microsoft.com/en-us/shows/introduction-to-github-copilot/\nSet up co-pilot for learning - https://docs.github.com/en/get-started/learning-to-code/setting-up-copilot-for-learning-to-code\nHow to write better prompts for GitHub Copilot - https://github.blog/developer-skills/github/how-to-write-better-prompts-for-github-copilot/\nAI Assisted Coding in RStudio - https://research-it.manchester.ac.uk/news/2024/11/29/ai-assisted-coding-in-rstudio/\nRTutor AI - https://rtutor.ai/\nSyntha AI - https://syntha.ai/code-generators/r\nR Code Generator - https://codingfleet.com/code-generator/r/\nLearning the tidyverse with the help of AI tools - https://www.tidyverse.org/blog/2025/04/learn-tidyverse-ai/\nIntroducing vitals, a toolkit for evaluating LLM products in R - https://www.tidyverse.org/blog/2025/06/vitals-0-1-0/\nUsing AI with R - https://rfortherestofus.com/courses/ai\nBoost Your R Skills with AI - https://artscience.ai/boost-your-r-skills-with-ai/\nBeginner’s Tutorial for the OpenAI API in R - https://tilburg.ai/2024/03/tutorial-openai-api-in-r/\nCodex - https://chatgpt.com/codex\n\nAI Assisted Coding in RStudio - https://research-it.manchester.ac.uk/news/2024/11/29/ai-assisted-coding-in-rstudio/ Integrating OpenAI’s ChatGPT into RStudio is now possible with “Chattr”, “GPT Studio” and “GitHub Copilot”. These new tools will help you find the right functions and commands and to quickly generate code snippets to save you time.\n8 ChatGPT packages for R - https://www.infoworld.com/article/2338386/8-chatgpt-tools-for-r-programming.html\n\nVibe coding https://www.geeksforgeeks.org/techtips/what-is-vibe-coding/\nWhat is vibe coding, exactly? - https://www.technologyreview.com/2025/04/16/1115135/what-is-vibe-coding-exactly/\nWhat Is Vibe Coding? Definition, Tools, Pros, and Cons - https://www.datacamp.com/blog/vibe-coding\nYou can use GitHub and Git to collaborate on work. https://docs.github.com/en/get-started/start-your-journey/about-github-and-git\nUsing co-pilot as your tutor - https://docs.github.com/en/get-started/learning-to-code/setting-up-copilot-for-learning-to-code\nchattr - https://mlverse.github.io/chattr/\n\nBioinformatics and AI * A data-intelligence-intensive bioinformatics copilot system for large-scale omics research and scientific insights - https://academic.oup.com/bib/article/26/4/bbaf312/8196318?login=true * Bioinformatics AI: Driving Future Biological Breakthroughs - https://biologyinsights.com/bioinformatics-ai-driving-future-biological-breakthroughs/"
  },
  {
    "objectID": "labs/lab1_rstudio.html",
    "href": "labs/lab1_rstudio.html",
    "title": "Lab 1 : Introduction to R and Reproducible Research",
    "section": "",
    "text": "The RStudio Integrated Development Environment\nThe Quarto scientific publishing system\nWorking in R coding chunks in Quarto\nReading error messages\n\n\n\nThe most popular way to write R programs and to interactively run code and create graphs is using the RStudio Integrated Devopement Environment (IDE). It is open source software that is available for free. There are other ways to write and run R code, such as using text editors, VS Code editors, Neovim or Jupyter Notebooks, but we will focus on RStudio in this class.\n\n\nI run R and RStudio on my computer. You can too. Most of the basics R labs for the class you should be able to do from your laptop.\n\nInstall the latest release (2025-06-13, Great Square Root) R-4.5.1 of R from CRAN and follow the installation instructions. If you have an older verion of R on your computer please update to this release as we can’t guarantee the labs will work on older versions.\nInstall R Studio, a nice graphical interface for working with R.\nOpen RStudio and install tidyverse under Tools &gt; Install Packages. You will need to install other packages as well for this and future labs."
  },
  {
    "objectID": "labs/lab1_rstudio.html#learning-objectives",
    "href": "labs/lab1_rstudio.html#learning-objectives",
    "title": "Lab 1 : Introduction to R and Reproducible Research",
    "section": "",
    "text": "The RStudio Integrated Development Environment\nThe Quarto scientific publishing system\nWorking in R coding chunks in Quarto\nReading error messages\n\n\n\nThe most popular way to write R programs and to interactively run code and create graphs is using the RStudio Integrated Devopement Environment (IDE). It is open source software that is available for free. There are other ways to write and run R code, such as using text editors, VS Code editors, Neovim or Jupyter Notebooks, but we will focus on RStudio in this class.\n\n\nI run R and RStudio on my computer. You can too. Most of the basics R labs for the class you should be able to do from your laptop.\n\nInstall the latest release (2025-06-13, Great Square Root) R-4.5.1 of R from CRAN and follow the installation instructions. If you have an older verion of R on your computer please update to this release as we can’t guarantee the labs will work on older versions.\nInstall R Studio, a nice graphical interface for working with R.\nOpen RStudio and install tidyverse under Tools &gt; Install Packages. You will need to install other packages as well for this and future labs."
  },
  {
    "objectID": "labs/lab1_rstudio.html#overview",
    "href": "labs/lab1_rstudio.html#overview",
    "title": "Lab 1 : Introduction to R and Reproducible Research",
    "section": "Overview",
    "text": "Overview\nIn recent years, the field of genomic analysis has sifted towards requiring some knowledge of R, Python/Perl/C and the use of high performance computers (often requiring some fundamental Unix skills) available at national computing centers for working with large data sets. While there are many great software packages available for particular computational problems in evolutionary biology, many software programs do not have a user interface (e.g. drop down menus and such) and are run in command line mode. The lab sessions in this course have been designed to give students an introduction to working with R and packages used for Human Genome Analysis.\nThe lab course is divided into 3 parts\n\nIntroduction to R and the tidyverse\nGene Expression Analysis\nAnalysis of SNPs and your genetic data"
  },
  {
    "objectID": "labs/lab1_rstudio.html#reproducible-research",
    "href": "labs/lab1_rstudio.html#reproducible-research",
    "title": "Lab 1 : Introduction to R and Reproducible Research",
    "section": "Reproducible Research",
    "text": "Reproducible Research\nReproducibility is the hallmark of science, which is based on empirical observations coupled with explanatory models. While reproducibility encompasses the full science lifecycle, and includes issues such as methodological consistency and treatment of bias, in this course we will focus on computational reproducibility: the ability to document data, analyses, and models sufficiently for other researchers to be able to understand and ideally re-execute the computations that lead to scientific results and conclusions. With current publishing practices, this can be difficult because data are typically unavailable, the method sections of papers do not detail the computational approaches used, and analyses and models are often conducted in graphical programs, or, when scripted analyses are employed, the code is not available. In this course we will learn how to write code that is integrated into reproducible reports."
  },
  {
    "objectID": "labs/lab1_rstudio.html#data-science",
    "href": "labs/lab1_rstudio.html#data-science",
    "title": "Lab 1 : Introduction to R and Reproducible Research",
    "section": "Data Science",
    "text": "Data Science\nHere a few links that I will go over in lab:\n\nWhat is Data Science? \n\nWhat is Data Science? 8 Skills That Will Get You Hired\n\nOpen Science is Kinder Science\n\nData Carpentry\n\nBuilding a local community of practice in scientific programming for life scientists"
  },
  {
    "objectID": "labs/lab1_rstudio.html#r",
    "href": "labs/lab1_rstudio.html#r",
    "title": "Lab 1 : Introduction to R and Reproducible Research",
    "section": "R",
    "text": "R\nR is the largest and most comprehensive public domain statistical computing environment. The core R package is enhanced by several hundred user-supplied add-on packages, including many for gene expression analysis, in the  Comprehensive R Archive Network (CRAN). Omegahat Project for Statistical Computing.  BioConductor is an open source and open development software project for the analysis and comprehension of genomic data and is based primarily on the R programming language. R and Bioconductor are free, Open Source and available for Windows, MacOS and a wide variety of UNIX platforms.\n\nThe RStudio Integrated Devopement Environment (IDE)\nThe most popular way to write R programs and to interactively run code and create graphs is using the RStudio Integrated Devopement Environment (IDE). It is open source software that is available for free. There are other ways to write and run R code, such as using text editors, VS Code editors, Neovim or Jupyter Notebooks, but we will focus on RStudio in this class.\n\n\nR manuals, help and tutorials\nMany introductory and advance tutorials have been developed for R. Here are a few\n\nThe offical R manuals\nCRAN’s Introduction to R\nR for Data Science by Garrett Grolemund and Hadley Wickham\nR Graphics Cookbook by Winston Chang\nData Carpentries Genomic Workshop Sessions\nData Analysis and Visualization in R for Ecologists\n\nThere are also many workshops and online R courses that you could take to follow up what you learn in this class."
  },
  {
    "objectID": "labs/lab1_rstudio.html#on-the-computer",
    "href": "labs/lab1_rstudio.html#on-the-computer",
    "title": "Lab 1 : Introduction to R and Reproducible Research",
    "section": "On the Computer",
    "text": "On the Computer\n\nGetting started on Unity\nUnity https://unity.rc.umass.edu/ is the UMass High Performance Computing cluster. We will be running bioinformatics software and using R and RStudio from the Unity HPC.\n\n\nWorking in RStudio\nThe default R studio appearance includes 4 windows.\n\nThe R script(s) and data view (upper left window).\nConsole (bottom left window).\nWorkspace and history (upper right window).\nFiles, plots, packages and help (botton right window).\n\n\n\n\nRStudio Screenshot\n\n\n\nThe R script(s) and data view window (upper left window)\nIn this window you can type directly into a file, run code and save the file for reuse. In this class we will work with Quarto files (discussed below).\n\n\nConsole Window (bottom left window)\nThe console is where you can type R commands and see output.\nType\n3 + 3\nTo better document and save your code write it in the Quarto documents rather than the console. On occasion we will use the console to access documentation and for other purposes.\n\n\nEnvironment and History tabs (upper right window)\nThe Environment tab shows all the active objects. If you have a data frame loaded, then click on the object will enable you to view the table. The History tab shows a list of commands used so far.\n\n\nFiles, Plots, Packages and Help (bottom right window)\nThere are data sets that come with the R package and used in tutorials. If you run the following command you will see a graph of related to the cars data set in the Plots window\n\n\n\nQuarto\nThe Quarto is a scientific publishing system. In this class we will use one of it’s simplest features, producing a report with the code and resulting output (graphs, tables, statistical analysis). Quarto can also be used to produce slides, web sites, scientific manuscripts and books. For example, and all the labs for this course and my research laboratory website were made using Quarto. Quarto wraps together many previous packages used for publishing with R.\nTo use Quarto with R, the rmarkdown R package is installed. There are some differences between a Quarto and R Markdown document, but overall they are very similar.\n\nProducing Lab Reports with Quarto\nIn RStudio select File &gt; New File &gt; Quarto Document. Add a title (e.g. Lab 1) and your name then create the document. Notice the your file says untitled with an asterisk. Save your file (e.g. lab1). This will automatically add the .qmd extension to your file (lab1.qmd). ALWAYS SAVE YOUR FILE BEFORE YOU START WORKING AND OFTEN WHILE WORKING.\nThe top section of the document delineated by the --- is called the YAML block. In this template it contains your the title, your name, the output type (html) and the editor preference (visual).You can also work with your file directly with the source code by clicking the source icon.\nThe following lines of code in your YAML block with generate a table of contents (toc) as shown at the top of this lab. The line with embed-resources creates a stand alone html file.\n---\ntitle: \"Lab 1\"\nauthor: \"Jeff Blanchard\"\nformat:\n  html:\n    toc: true\n    toc_float: true\n    embed-resources: true\neditor: visual\n---\nThe text with the white background is in rmarkdown. The icons in the same section as the visual icon you can easily made the text in bold or in italics, change the text from normal to a header, create bulleted or numbered lists, insert html links, add images, insert tables and more.\nThe text with the gray background is in R code chunks. Click on the green play icon in the top right corner of the code chunk to run the code.\nClick on the Render icon. This will run the code, show the output and create a html file that is automatically saved to your directory (look for the lab1.html file) and will automatically open this file in your browser.\nCreate new code chunk by clicking on the green +C icon to the right of the Render icon. In the code chunk type plot(cars). Then click the run the code to see a graph of the cars data set that comes preloaded into R.\n\n\nR code\nplot(cars)"
  },
  {
    "objectID": "labs/lab1_rstudio.html#writing-r-code",
    "href": "labs/lab1_rstudio.html#writing-r-code",
    "title": "Lab 1 : Introduction to R and Reproducible Research",
    "section": "Writing R code",
    "text": "Writing R code\n\nAssignment statements\nAll R statements where you create objects are called assignment statements and the form “object_name &lt;- value”\n\n\nR code\nx &lt;- 3\n\n\nSimply typing x will give the value of x\n\n\nR code\nx\n\n\n[1] 3\n\n\nYou will make lots of assignments and &lt;- is a pain to type. Instead, use RStudio’s keyboard shortcut: Alt + - (the minus sign). Notice that RStudio automagically surrounds &lt;- with spaces, which is a good code formatting practice. An equals sign = will work in place of &lt;-, but it will cause confusion later so keep to the convention of using &lt;- to make assignments\n\n\nObject Names\nObject names must start with a letter, and can only contain letters, numbers, underscores and periods. You want your object names to be descriptive, so you’ll need a convention for multiple words. I recommend snake_case where you separate lowercase words with an underscore. Note that R is case sensitive, e.g., object names gene, GENE, Gene are all different.\n\n\nR code\ngenome_size &lt;- 3100000000\n\n\nImportant note: since there are many built-in functions in R, make sure that the new object names you assign are not already used by the system. A simple way of checking this is to type in the name you want to use. If the system returns an error message telling you that such object is not found, it is safe to use the name.\n\n\nCharacters\nA character object is used to represent string values in R. It is defined by double quotes ““.\n\n\nR code\nDNA &lt;- \"ATGAAA\"\nDNA\n\n\n[1] \"ATGAAA\"\n\n\n\n\nVectors\nA vector is a sequence of data elements of the same basic type. data elements in a vector are officially called components. Assignment operator (&lt;-) stores the value (object) on the right side of (&lt;-) expression in the left side. Once assigned, the object can be used just as an ordinary component of the computation. The c function concanenates the components into a vector.\n\n\nR code\nrandom_numbers &lt;- c(1,10,100)    \nrandom_numbers\n\n\n[1]   1  10 100\n\n\nNow you can do scalar computations on a vector\n\n\nR code\nrandom_numbers * 2\n\n\n[1]   2  20 200\n\n\nor use sum, sort, min, max, length and many other operations. For example\n\n\nR code\nsort(random_numbers)\n\n\n[1]   1  10 100\n\n\nYou can also do vector arithmatic\n\n\nR code\nrandom_numbers &lt;- c(1,10,100) \ny&lt;- c(1,2,3) \nrandom_numbers * y\n\n\n[1]   1  20 300\n\n\nVectors can also be made of characters\n\n\nR code\ncodons&lt;- c(\"AUG\", \"UAU\", \"UGA\") \ncodons\n\n\n[1] \"AUG\" \"UAU\" \"UGA\""
  },
  {
    "objectID": "labs/lab1_rstudio.html#exercises",
    "href": "labs/lab1_rstudio.html#exercises",
    "title": "Lab 1 : Introduction to R and Reproducible Research",
    "section": "Exercises",
    "text": "Exercises\nYour lab report must have each exercise labeled with a header (e.g. ## Exercise 1) so that each one appears in the table of contents.\nYou will need to first export (download) the Lab1_yourname.html file to your computer, then upload the file to Canvas. In the bottom right corner click on the wheel icon then select Export.\n\nThe main goal for today’s lab is to create the lab report so we need a few exercises to fill it out\n\nExercise 1\nFor x = 2 and y = 15, compute the sum and difference of x and y\n\n\nExercise 2\nCreate a vector of the values 22, 62, 148, 43 and 129. Multiple the vector by 5.\n\n\nExercise 3\nCreate a vector of the nucleotides A, T, C and G. Remember to put a “” around each letter. Arrange the nucleotides alphabetically using the sort function sort(vector_name)"
  },
  {
    "objectID": "labs/lab1_overview.html#learning-objectives",
    "href": "labs/lab1_overview.html#learning-objectives",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "What is bioinformatics?\nWhat is reproducible research?\nWhy learn bioinformatics and data science skills?\nHigh Performance Computing (Unity)\nOverview of the R statistical programming language"
  },
  {
    "objectID": "labs/lab1_overview.html#overview",
    "href": "labs/lab1_overview.html#overview",
    "title": "Lab 1 - Overview",
    "section": "Overview",
    "text": "Overview\nIn recent years, the field of genomic analysis and bioinformatics has sifted towards requiring some knowledge of R, Python/Perl/C and the use of high performance computers (often requiring some fundamental Unix skills) available at national computing centers for working with large data sets. While there are many great software packages available for particular computational problems in evolutionary biology, many software programs do not have a user interface (e.g. drop down menus and such) and are run in command line mode. The lab sessions in this course have been designed to give students an introduction to working with R and packages used for genome and metagenome analyses.\nThe lab course is divided into 3 parts\n\nIntroduction to R and the tidyverse\nGene Expression Analysis\nAnalysis of SNPs and your genetic data"
  },
  {
    "objectID": "labs/lab1_overview.html#reproducible-research",
    "href": "labs/lab1_overview.html#reproducible-research",
    "title": "Lab 1 - Overview",
    "section": "Reproducible Research",
    "text": "Reproducible Research\nReproducibility is the hallmark of science, which is based on empirical observations coupled with explanatory models. While reproducibility encompasses the full science lifecycle, and includes issues such as methodological consistency and treatment of bias, in this course we will focus on computational reproducibility: the ability to document data, analyses, and models sufficiently for other researchers to be able to understand and ideally re-execute the computations that lead to scientific results and conclusions. With current publishing practices, this can be difficult because data are typically unavailable, the method sections of papers do not detail the computational approaches used, and analyses and models are often conducted in graphical programs, or, when scripted analyses are employed, the code is not available. In this course we will learn how to write code that is integrated into reproducible reports."
  },
  {
    "objectID": "labs/lab1_overview.html#data-science",
    "href": "labs/lab1_overview.html#data-science",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "The field of data science has grown tremendously over the last decade and the two programming languages, R and Python, used in analyzing genomic data are the most popular languages for data science. This made it easy to transfer bioinformatics skills to diverse fields.\nHere a few links that I will go over in lab:\n\nWhat is Data Science? \n\nWhat is Data Science? 8 Skills That Will Get You Hired\n\nOpen Science is Kinder Science\n\nData Carpentry\n\nBuilding a local community of practice in scientific programming for life scientists"
  },
  {
    "objectID": "labs/lab1_overview.html#high-performance-computing-unity-and-unix",
    "href": "labs/lab1_overview.html#high-performance-computing-unity-and-unix",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "In this course we will learn to write basic unix commands, run bioinformatics software from the command line and allocate computer resources for submitting large jobs. UMass has modern High Performance Computing system, Unity, and excellent staff members to help get you going and trouble shoot issues. Working on HPCs has become much easier with the advent of web interfaces that look and work much like software running on your computer."
  },
  {
    "objectID": "labs/lab1_overview.html#r",
    "href": "labs/lab1_overview.html#r",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "R is the largest and most comprehensive public domain statistical computing environment. The core R package is enhanced by several hundred user-supplied add-on packages, including many for gene expression analysis, in the  Comprehensive R Archive Network (CRAN). Omegahat Project for Statistical Computing.  BioConductor is an open source and open development software project for the analysis and comprehension of genomic data and is based primarily on the R programming language. R and Bioconductor are free, Open Source and available for Windows, MacOS and a wide variety of UNIX platforms.\n\n\nReproducibility is the hallmark of science, which is based on empirical observations coupled with explanatory models. While reproducibility encompasses the full science lifecycle, and includes issues such as methodological consistency and treatment of bias, in this course we will focus on computational reproducibility: the ability to document data, analyses, and models sufficiently for other researchers to be able to understand and ideally re-execute the computations that lead to scientific results and conclusions. With current publishing practices, this can be difficult because data are typically unavailable, the method sections of papers do not detail the computational approaches used, and analyses and models are often conducted in graphical programs, or, when scripted analyses are employed, the code is not available. In this course we will learn how to write code that is integrated into reproducible reports.\n\n\n\nMany introductory and advance tutorials have been developed for R. Here are a few\n\nThe offical R manuals\nCRAN’s Introduction to R\nR for Data Science by Garrett Grolemund and Hadley Wickham\nR Graphics Cookbook by Winston Chang\nData Carpentries Genomic Workshop Sessions\nData Analysis and Visualization in R for Ecologists\n\nThere are also many workshops and online R courses that you could take to follow up what you learn in this class."
  },
  {
    "objectID": "labs/lab1_overview.html#what-is-bioinformatics-and-data-science",
    "href": "labs/lab1_overview.html#what-is-bioinformatics-and-data-science",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "Bioinformatics is the field of science in which biology, computer science, statistics and information technology merge into a single discipline. There are three important sub-disciplines within bioinformatics:\n\nThe development of new algorithms and statistics with which to assess relationships among members of large data sets.\nThe development and implementation of tools that enable efficient access and management of different types of information.\nThe analysis and interpretation of various types of data including nucleotide and amino acid sequences, protein domains, and protein structures.\n\n\n\n\nis a term coined in response to the high demand of techniques and resources for handling the explosion of molecular data.\nis a buzzword to describe a growing field.\nbenefits from the physicists, chemists and mathematicians crossing over into biology.\nis a collection of tools.\nis way of thinking about a problem!\n\n\n\n\nIn order to make new algorithms and data sources available to biologists someone needs to write applications that include these algorithms and create new databases. Often this is first done by academic research groups. Later redone by private companies when market is large and profitable enough. There is a large gap between what is done by research groups and companies. Sometimes this is filled by large government funded projects, but not usually in time for most researchers. This is why bioinformatics and programming skills have become very valuable."
  },
  {
    "objectID": "methods/NEON_plot_samples.html",
    "href": "methods/NEON_plot_samples.html",
    "title": "Visualizing NEON samples within a plot",
    "section": "",
    "text": "R code\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(viridis)\n\n\nLoad file\n\n\nR code\nneon.plot.samples &lt;- read_csv(\"../data/NEON_metadata/harvard_seasonal_study_coordinates.csv\")\n\n\nPlot of samples per plot per year at all HARV metagenome plots\n\n\nR code\nneon.plot.samples |&gt; \n  ggplot(aes(x=coreCoordinateX, y = coreCoordinateY, color = sampleTiming)) +\n  # add lines and annotate subplots\n  geom_hline(yintercept=20, color = \"gray\") +\n  geom_vline(xintercept=20, color = \"gray\") + \n  annotate(\"text\", x = 5, y = 5, label = \"21\", color = \"black\", size = 2) +\n  annotate(\"text\", x = 5, y = 35, label = \"39\", color = \"black\", size = 2) +\n  annotate(\"text\", x = 35, y = 5, label = \"23\", color = \"black\", size = 2) +\n  annotate(\"text\", x = 35, y = 35, label = \"41\", color = \"black\", size = 2) +\n  geom_rect(aes(xmin = 0, xmax = 40, ymin = 0, ymax = 40), fill = NA, color = \"black\", linewidth = .1) +\n  # add rectangle with no soil sampling area\n  geom_rect(aes(xmin = 10, xmax = 30, ymin = 10, ymax = 30), fill = \"white\", color = \"grey\", linewidth = .1) +\n  annotate(\"text\", x = 20, y = 23, label = \"No soil\", color = \"black\", size = 2) +\n  annotate(\"text\", x = 20, y = 17, label = \"sampling area\", color = \"black\", size = 2) +\n  # sampling points\n  geom_point(aes(shape = candidate)) +\n  labs(title = \"Plot position of organic soil samples from HARV in 2024\") +\n  facet_wrap(~plotID) +\n  theme_minimal() +\n  coord_fixed()\n\n\n\n\n\n\n\n\n\n## Use pairwise distances and compute a total or average distance between the points in each set.\n### 33\n\n\nR code\n# Define two sets of 3 points\nset1 &lt;- matrix(c(2.5, 15, 12, 31.5, 0.5, 35.5), ncol = 2, byrow = TRUE)  # Points: (21,2.5), (2,2), (3,3)\nset2 &lt;- matrix(c(36, 19.5, 31.5, 16.5, 24.5, 0), ncol = 2, byrow = TRUE)  # Points: (1,1), (1.5,1.5), (2,2)\n\n# Function to compute total pairwise distance\ntotal_distance &lt;- function(points) {\n  dist_matrix &lt;- dist(points)  # Computes all pairwise distances\n  sum(dist_matrix)\n}\n\n# Compare sets\ndist1 &lt;- total_distance(set1)\ndist2 &lt;- total_distance(set2)\n\ncat(\"Set 1 total distance:\", dist1, \"\\n\")\n\n\nSet 1 total distance: 51.81256 \n\n\nR code\ncat(\"Set 2 total distance:\", dist2, \"\\n\")\n\n\nSet 2 total distance: 45.97024 \n\n\nR code\nif (dist1 &lt; dist2) {\n  cat(\"Set 1 is closer together.\\n\")\n} else {\n  cat(\"Set 2 is closer together.\\n\")\n}\n\n\nSet 2 is closer together.\n\n\n## Use pairwise distances and compute a total or average distance between the points in each set.\n### 34\n\n\nR code\n# Define two sets of 3 points\nset1 &lt;- matrix(c(16.5, 31.5, 11, 34, 30, 28), ncol = 2, byrow = TRUE)  # Points: (21,2.5), (2,2), (3,3)\nset2 &lt;- matrix(c(3, 2, 19, 8, 13.5, 9), ncol = 2, byrow = TRUE)  # Points: (1,1), (1.5,1.5), (2,2)\n\n# Function to compute total pairwise distance\ntotal_distance &lt;- function(points) {\n  dist_matrix &lt;- dist(points)  # Computes all pairwise distances\n  sum(dist_matrix)\n}\n\n# Compare sets\ndist1 &lt;- total_distance(set1)\ndist2 &lt;- total_distance(set2)\n\ncat(\"Set 1 total distance:\", dist1, \"\\n\")\n\n\nSet 1 total distance: 39.91271 \n\n\nR code\ncat(\"Set 2 total distance:\", dist2, \"\\n\")\n\n\nSet 2 total distance: 35.29761 \n\n\nR code\nif (dist1 &lt; dist2) {\n  cat(\"Set 1 is closer together.\\n\")\n} else {\n  cat(\"Set 2 is closer together.\\n\")\n}\n\n\nSet 2 is closer together."
  },
  {
    "objectID": "labs/lab1_overview.html#generative-ai",
    "href": "labs/lab1_overview.html#generative-ai",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "You all are part of the first generation of generative AI users. The saying goes “AI won’t take your job, but someone using who knows how to use AI might.” Think of AI as a force multiplier. You have to learn to code and clearly state your problems before AI can to help you. This class will fully use generative AI in hopes that it will challenge us to think more creatively about problems and not stress out about syntax. Think first…ask questions…code…solve problem! We will use the UMass version of Microsoft Copilot Chat and Copilot integrated into RStudio. We will embrace “Vibe coding” (see What is Vibe Coding, Exactly?) and ride the waves."
  },
  {
    "objectID": "labs/lab1_overview.html#overview-1",
    "href": "labs/lab1_overview.html#overview-1",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "In recent years, the field of genomic analysis and bioinformatics has sifted towards requiring some knowledge of R, Python/Perl/C and the use of high performance computers (often requiring some fundamental Unix skills) available at national computing centers for working with large data sets. While there are many great software packages available for particular computational problems in evolutionary biology, many software programs do not have a user interface (e.g. drop down menus and such) and are run in command line mode. The lab sessions in this course have been designed to give students an introduction to working with R and packages used for genome and metagenome analyses. We are using recently release National Ecological Observatory Network data to design a course-based Undergraduate Research Experience (CURE). The first 4 weeks we will discuss to project space, discuss research ideas and formulate testable hypothesis or discovery driven approaches, design the experimental approaches. For a preview today I will give an overview of the project space."
  },
  {
    "objectID": "labs/lab1_overview.html#github",
    "href": "labs/lab1_overview.html#github",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "GitHub has become a popular way to manage, share and view code for open source projects. The tutorials created for this course will be written in Quarto and posted on GitHub. Thus, you will be able to continue to see course materials after the end of the semester. You will use and make a GitHub web site for your research project."
  },
  {
    "objectID": "labs/lab1_overview.html#course-based-undergraduate-research-experience-cure",
    "href": "labs/lab1_overview.html#course-based-undergraduate-research-experience-cure",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "We are using recently release National Ecological Observatory Network data to design a course-based Undergraduate Research Experience (CURE). The first 4 weeks we will discuss to project space, discuss research ideas and formulate testable hypothesis or discovery driven approaches, design the experimental approaches. For a preview today I will give an overview of the project space"
  },
  {
    "objectID": "labs/lab1_overview.html#dyiers",
    "href": "labs/lab1_overview.html#dyiers",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "",
    "text": "You can do all of the R-based labs on your own computer. Follow these directions by the makers of RStudio, Posit. You will need to download the lab files from Unity or the course GitHub site."
  },
  {
    "objectID": "labs/lab1_overview.html#accessing-the-course-unity-resources",
    "href": "labs/lab1_overview.html#accessing-the-course-unity-resources",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "Accessing the course Unity resources",
    "text": "Accessing the course Unity resources\nIf you haven’t already done so, request a Unity HPC account and access to our course directory\nTo request a Unity account and access our course directory.\n\nGo to Unity\nRequest an account\nGo to MyPIs, click on the + button and enter pi_bio678_umass_edu"
  },
  {
    "objectID": "labs/lab1_overview.html#r-and-rstudio",
    "href": "labs/lab1_overview.html#r-and-rstudio",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "R and RStudio",
    "text": "R and RStudio\n\nRStudio using Open OnDemand\nOpen OnDemand makes supercomputing accessible through a web portal.\n\nGo to Unity\nOn the left menu select OpenOnDemand\nIn the top menu select Interactive Apps then RStudio\nSet the job duration for 4 hrs to cover the length of the lab. Otherwise set the time to what you anticipate needing.\nUnless otherwise suggested set CPU Core Count to 2 and the memory to 8 gb.\n\nClick Launch. It takes about a minute the job to start and then you can launch the RStudio Interface.\n\n\n\nRStudio Interface\nThe default R studio appearance includes 4 windows.\n\nThe R script(s) and data view (upper left window).\nConsole (bottom left window).\nWork space and history (upper right window).\nFiles, plots, packages and help (bottom right window).\n\n\n\n\nRStudio Screenshot\n\n\n\nThe R script(s) and data view window (upper left window)\nIn this window you can type directly into a file, run code and save the file for reuse. In this class we will work with Quarto files (discussed below).\n\n\nConsole Window (bottom left window)\nThe console is where you can type R commands and see output.\nType\n3 + 3\nTo better document and save your code write it in the Quarto documents rather than the console. On occasion we will use the console to access documentation and for other purposes.\n\n\nEnvironment and History tabs (upper right window)\nThe Environment tab shows all the active objects. If you have a data frame loaded, then click on the object will enable you to view the table. The History tab shows a list of commands used so far.\n\n\nFiles, Plots, Packages and Help (bottom right window)\nThere are data sets that come with the R package and used in tutorials. If you run the following command you will see a graph of related to the cars data set in the Plots window\n\n\n\nQuarto\nThe Quarto is a scientific publishing system. In this class we will use one of it’s simplest features, producing a report with the code and resulting output (graphs, tables, statistical analysis). Quarto can also be used to produce slides, web sites, scientific manuscripts and books. For example, and all the labs for this course and my research laboratory website were made using Quarto. Quarto wraps together many previous packages used for publishing with R.\nTo use Quarto with R, the rmarkdown R package is installed. There are some differences between a Quarto and R Markdown document, but overall they are very similar.\n\nProducing Lab Reports with Quarto\nIn RStudio select File &gt; New File &gt; Quarto Document. Add a title (e.g. Lab 1) and your name then create the document. Notice the your file says untitled with an asterisk. Save your file (e.g. lab1). This will automatically add the .qmd extension to your file (lab1.qmd). ALWAYS SAVE YOUR FILE BEFORE YOU START WORKING AND OFTEN WHILE WORKING.\nThe top section of the document delineated by the --- is called the YAML block. In this template it contains your the title, your name, the output type (html) and the editor preference (visual).You can also work with your file directly with the source code by clicking the source icon.\nThe following lines of code in your YAML block with generate a table of contents (toc) as shown at the top of this lab. The line with embed-resources creates a stand alone html file. This is also availabe as lab_template.qmd in our course directory /work/pi_bio678_umass_edu\n---\ntitle: \"Lab 1\"\nauthor: \"Your name\"\nformat:\n  html:\n    toc: true\n    toc_float: true\n    embed-resources: true\neditor: visual\nexecute: \n  warning: false\n  message: false\n---\nThe text with the white background is in rmarkdown. The icons in the same section as the visual icon you can easily made the text in bold or in italics, change the text from normal to a header, create bulleted or numbered lists, insert html links, add images, insert tables and more.\nThe text with the gray background is in R code chunks. Click on the green play icon in the top right corner of the code chunk to run the code.\nClick on the Render icon. This will run the code, show the output and create a html file that is automatically saved to your directory (look for the lab1.html file) and will automatically open this file in your browser.\nCreate new code chunk by clicking on the green +C icon to the right of the Render icon. In the code chunk type plot(cars). Then click the run the code to see a graph of the cars data set that comes preloaded into R.\n\n\nR code\nplot(cars)"
  },
  {
    "objectID": "labs/lab1_overview.html#writing-r-code",
    "href": "labs/lab1_overview.html#writing-r-code",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "Writing R code",
    "text": "Writing R code\n\nAssignment statements\nAll R statements where you create objects are called assignment statements and the form “object_name &lt;- value”\n\n\nR code\nx &lt;- 3\n\n\nSimply typing x will give the value of x\n\n\nR code\nx\n\n\n[1] 3\n\n\nYou will make lots of assignments and &lt;- is a pain to type. Instead, use RStudio’s keyboard shortcut: Alt + - (the minus sign). Notice that RStudio automagically surrounds &lt;- with spaces, which is a good code formatting practice. An equals sign = will work in place of &lt;-, but it will cause confusion later so keep to the convention of using &lt;- to make assignments\n\n\nObject Names\nObject names must start with a letter, and can only contain letters, numbers, underscores and periods. You want your object names to be descriptive, so you’ll need a convention for multiple words. I recommend snake_case where you separate lowercase words with an underscore. Note that R is case sensitive, e.g., object names gene, GENE, Gene are all different.\n\n\nR code\ngenome_size &lt;- 3100000000\n\n\nImportant note: since there are many built-in functions in R, make sure that the new object names you assign are not already used by the system. A simple way of checking this is to type in the name you want to use. If the system returns an error message telling you that such object is not found, it is safe to use the name.\n\n\nCharacters\nA character object is used to represent string values in R. It is defined by double quotes ““.\n\n\nR code\nDNA &lt;- \"ATGAAA\"\nDNA\n\n\n[1] \"ATGAAA\"\n\n\n\n\nVectors\nA vector is a sequence of data elements of the same basic type. data elements in a vector are officially called components. Assignment operator (&lt;-) stores the value (object) on the right side of (&lt;-) expression in the left side. Once assigned, the object can be used just as an ordinary component of the computation. The c function concanenates the components into a vector.\n\n\nR code\nrandom_numbers &lt;- c(1,10,100)    \nrandom_numbers\n\n\n[1]   1  10 100\n\n\nNow you can do scalar computations on a vector\n\n\nR code\nrandom_numbers * 2\n\n\n[1]   2  20 200\n\n\nor use sum, sort, min, max, length and many other operations. For example\n\n\nR code\nsort(random_numbers)\n\n\n[1]   1  10 100\n\n\nYou can also do vector arithmatic\n\n\nR code\nrandom_numbers &lt;- c(1,10,100) \ny&lt;- c(1,2,3) \nrandom_numbers * y\n\n\n[1]   1  20 300\n\n\nVectors can also be made of characters\n\n\nR code\ncodons&lt;- c(\"AUG\", \"UAU\", \"UGA\") \ncodons\n\n\n[1] \"AUG\" \"UAU\" \"UGA\""
  },
  {
    "objectID": "labs/lab1_overview.html#exercises",
    "href": "labs/lab1_overview.html#exercises",
    "title": "Lab 1 - Overview & Getting Started",
    "section": "Exercises",
    "text": "Exercises\nYour lab report must have each exercise labeled with a header (e.g. ## Exercise 1) so that each one appears in the table of contents.\nYou will need to first export (download) the Lab1_yourname.html file to your computer, then upload the file to Canvas. In the bottom right corner click on the wheel icon then select Export.\n\nThe main goal for today’s lab is to create the lab report so we need a few exercises to fill it out\n\nExercise 1\nFor x = 2 and y = 15, compute the sum and difference of x and y\n\n\nExercise 2\nCreate a vector of the values 22, 62, 148, 43 and 129. Multiple the vector by 5.\n\n\nExercise 3\nCreate a vector of the nucleotides A, T, C and G. Remember to put a “” around each letter. Arrange the nucleotides alphabetically using the sort function sort(vector_name)"
  },
  {
    "objectID": "labs/lab1s_quarto.html",
    "href": "labs/lab1s_quarto.html",
    "title": "Lab 1s - Quarto",
    "section": "",
    "text": "Quarto\nDifferences between R Markdown and Quarto\nYAML blocks\nCode blocks\n\n\n\n\n\nQuarto is the name of an open-source publishing system used for technical and scientific writing.\nIt lets you combine text, code, and outputs in one document—perfect for data science, research, and reproducible reports.\nYou can write in Python, R, Julia, or Observable JavaScript, and publish to formats like HTML, PDF, Word, and even full websites\nIt’s considered the next generation of R Markdown, and works with tools like Jupyter Notebooks, VS Code, and RStudio.\nBecause it is based on R Markdown, there is a wealth of related resources and books published on and using R Markdown. See some of on the examples books using R we will periodically using in the course.\n\n\n\n\nR Markdown and Quarto are both tools for creating dynamic documents that combine code, text, and outputs (like plots or tables), but they differ in terms of design philosophy, features, and flexibility. Here’s a breakdown of their key differences:\n\n\n\nR Markdown:\n\nDeveloped by RStudio.\nPrimarily designed for R users.\nBuilt on top of knitr and Pandoc.\nDeeply integrated into the RStudio IDE.\n\nQuarto:\n\nAlso developed by RStudio, but as a next-generation tool.\nLanguage-agnostic: supports R, Python, Julia, and Observable JavaScript.\nUses Pandoc directly (not knitr).\nDesigned to unify and modernize the workflow across languages.\n\n\n\n\n\n\nR Markdown: Best suited for R. Python support is possible but less seamless.\nQuarto: First-class support for multiple languages in a single document. You can mix R, Python, Julia, and JavaScript.\n\n\n\n\n\nR Markdown:\n\nUses YAML front matter for metadata.\nCode chunks are written using triple backticks with language identifiers.\n\nQuarto:\n\nSimilar structure but more consistent and extensible YAML.\nSupports Markdown extensions like callouts, citations, cross-referencing, and more.\n\n\n\n\n\n\nR Markdown:\n\nSupports HTML, PDF, Word, slides (via xaringan or ioslides), etc.\nCustomization can be complex for advanced layouts.\n\nQuarto:\n\nSupports all R Markdown formats plus:\n\nReveal.js slides.\nBooks and websites with built-in navigation and styling.\nJupyter-style notebooks.\n\nEasier to configure and customize outputs.\n\n\n\n\n\n\nR Markdown:\n\nExecutes code using knitr (for R) or reticulate (for Python).\nLess control over execution environment.\n\nQuarto:\n\nUses Jupyter kernels or R directly.\nBetter support for notebook-style interactivity and execution control.\n\n\n\n\n\n\nR Markdown:\n\nNo native concept of a “project” beyond RStudio projects.\n\nQuarto:\n\nSupports Quarto Projects: collections of documents with shared configuration.\nIdeal for books, blogs, websites, and multi-document workflows.\n\n\n\n\n\n\nQuarto:\n\nMore modern and extensible.\nSupports Lua filters, Markdown extensions, cross-referencing, citations, and interactive widgets.\nBetter support for version control and CI/CD workflows.\n\n\n\n\n\n\n\n\nFeature\nR Markdown\nQuarto\n\n\n\n\nLanguage Support\nPrimarily R\nR, Python, Julia, JS\n\n\nExecution Engine\nknitr\nJupyter / native\n\n\nOutput Formats\nMany\nMore + easier config\n\n\nInteractivity\nLimited\nRich (widgets, JS)\n\n\nProject Support\nBasic\nFull project system\n\n\nExtensibility\nModerate\nHigh\n\n\nIdeal For\nR-centric reports\nMulti-language docs\n\n\n\n\n\n\n\n\nLet’s go the the Quarto documentation for Markdown basics and more details on Figures\nIt is important to specific where the figure is located relative to your .qmd file. The path can be relative (giant_virus.jpg) or (images/giant_virus.jpg) or absolute (/home/pi_jlb_umass_edu/images/giant_virus.jpg).\n\n\n\ngiant virus\n\n\n\n\n\nIn Quarto, a YAML block is a section at the top of a document that contains metadata and configuration settings. YAML stands for “YAML Ain’t Markup Language”, and it’s used to define things like the document title, author, output format, and more.\n\n\nA YAML block is enclosed by triple dashes (---) at the beginning and end:\n---\ntitle: \"My Analysis Report\"\nauthor: \"Jeffrey Blanchard\"\ndate: \"2025-09-08\"\nformat: html\neditor: visual\n---\nThis block tells Quarto: - The title of the document. - The author name. - The date to display. - The output format (e.g., HTML, PDF, Word). - The editor preference (e.g., visual or source).\n\n\n\nHere are some frequently used fields:\n\n\n\n\n\n\n\nField\nDescription\n\n\n\n\ntitle\nTitle of the document\n\n\nauthor\nAuthor name(s)\n\n\ndate\nDate of publication\n\n\nformat\nOutput format (e.g., html, pdf, docx, revealjs)\n\n\ntoc\nTable of contents (true or false)\n\n\nnumber-sections\nNumber section headings\n\n\ntheme\nVisual theme for HTML or slides\n\n\ncode-fold\nWhether code chunks can be collapsed\n\n\nexecute\nControls code execution (e.g., echo, eval, freeze)\n\n\nbibliography\nPath to .bib file for citations\n\n\nfilters\nLua filters for advanced customization\n\n\n\n\n\n\n---\ntitle: \"Data Exploration\"\nauthor: \"Jeffrey Blanchard\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    theme: cosmo\nexecute:\n  echo: true\n  freeze: auto\n---\nThis configures: - An HTML output with a table of contents. - Collapsible code chunks. - A Bootstrap theme (cosmo). - Code execution settings.\n\n\n\nQuarto YAML is: - More consistent and extensible. - Supports nested configuration (e.g., format.html.toc). - Easier to manage across multi-format outputs (e.g., HTML and PDF from one source).\nIn Quarto, R code chunks are sections of code embedded in your document that get executed when the document is rendered. These chunks are enclosed in triple backticks and start with {r}. You can customize their behavior using chunk options, which control things like whether the code is shown, whether it’s executed, how results are displayed, and more.\n\n\n\n\n\n\n\n\nR code\nsummary(cars)\n\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\n\n\nHere’s a categorized list of the most useful options:\n\n\n\n\n\nOption\nDescription\n\n\n\n\neval\nWhether to evaluate the code (TRUE or FALSE)\n\n\necho\nShow the code in the output (TRUE or FALSE)\n\n\ninclude\nInclude both code and output (TRUE or FALSE)\n\n\nerror\nShow errors in output (TRUE or FALSE)\n\n\nwarning\nShow warnings (TRUE or FALSE)\n\n\nmessage\nShow messages (TRUE or FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nresults\nHow to display results (\"markup\", \"asis\", \"hide\")\n\n\nfig.width\nWidth of plots (in inches)\n\n\nfig.height\nHeight of plots (in inches)\n\n\nfig.cap\nCaption for figures\n\n\nfig.align\nAlignment of figures (\"left\", \"center\", \"right\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ncache\nCache results to avoid re-running code\n\n\nfreeze\nFreeze output to avoid re-execution unless explicitly updated\n\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ntidy\nAutomatically tidy code before execution\n\n\ncollapse\nCollapse code and output together\n\n\ncomment\nPrefix for output lines\n\n\n\n\n\n\n\n\n\n\n\n\nPressure vs Temperature\n\n\n\n\nThis chunk: - Hides the code (echo=FALSE) - Sets figure size - Adds a caption - Names the chunk (pressure-plot) for reference\n\n\n\n\nCreate a lab report that has\n\nA link out to an external web site.\nAn image embedded.\nA table of contents using the YAML block\nThe code folded using the YAML block\nA code chunk with plot(cars) in which the plot is sized to a figure width of 3 and height of 2\nA code chunk in which the output, but not the code is in the rendered file.\n\n\n\n\nThis lab was created with assistance from UMass Copilot"
  },
  {
    "objectID": "labs/lab1s_quarto.html#learning-objectives",
    "href": "labs/lab1s_quarto.html#learning-objectives",
    "title": "Lab 1s - Quarto",
    "section": "",
    "text": "Quarto\nDifferences between R Markdown and Quarto\nYAML blocks\nCode blocks"
  },
  {
    "objectID": "labs/lab1s_quarto.html#quarto",
    "href": "labs/lab1s_quarto.html#quarto",
    "title": "Lab 1s - Quarto",
    "section": "",
    "text": "Quarto is the name of an open-source publishing system used for technical and scientific writing.\nIt lets you combine text, code, and outputs in one document—perfect for data science, research, and reproducible reports.\nYou can write in Python, R, Julia, or Observable JavaScript, and publish to formats like HTML, PDF, Word, and even full websites\nIt’s considered the next generation of R Markdown, and works with tools like Jupyter Notebooks, VS Code, and RStudio.\nBecause it is based on R Markdown, there is a wealth of related resources and books published on and using R Markdown. See some of on the examples books using R we will periodically using in the course."
  },
  {
    "objectID": "labs/lab1s_quarto.html#differences-between-r-markdown-and-quarto",
    "href": "labs/lab1s_quarto.html#differences-between-r-markdown-and-quarto",
    "title": "Lab 1s - Quarto",
    "section": "",
    "text": "R Markdown and Quarto are both tools for creating dynamic documents that combine code, text, and outputs (like plots or tables), but they differ in terms of design philosophy, features, and flexibility. Here’s a breakdown of their key differences:\n\n\n\nR Markdown:\n\nDeveloped by RStudio.\nPrimarily designed for R users.\nBuilt on top of knitr and Pandoc.\nDeeply integrated into the RStudio IDE.\n\nQuarto:\n\nAlso developed by RStudio, but as a next-generation tool.\nLanguage-agnostic: supports R, Python, Julia, and Observable JavaScript.\nUses Pandoc directly (not knitr).\nDesigned to unify and modernize the workflow across languages.\n\n\n\n\n\n\nR Markdown: Best suited for R. Python support is possible but less seamless.\nQuarto: First-class support for multiple languages in a single document. You can mix R, Python, Julia, and JavaScript.\n\n\n\n\n\nR Markdown:\n\nUses YAML front matter for metadata.\nCode chunks are written using triple backticks with language identifiers.\n\nQuarto:\n\nSimilar structure but more consistent and extensible YAML.\nSupports Markdown extensions like callouts, citations, cross-referencing, and more.\n\n\n\n\n\n\nR Markdown:\n\nSupports HTML, PDF, Word, slides (via xaringan or ioslides), etc.\nCustomization can be complex for advanced layouts.\n\nQuarto:\n\nSupports all R Markdown formats plus:\n\nReveal.js slides.\nBooks and websites with built-in navigation and styling.\nJupyter-style notebooks.\n\nEasier to configure and customize outputs.\n\n\n\n\n\n\nR Markdown:\n\nExecutes code using knitr (for R) or reticulate (for Python).\nLess control over execution environment.\n\nQuarto:\n\nUses Jupyter kernels or R directly.\nBetter support for notebook-style interactivity and execution control.\n\n\n\n\n\n\nR Markdown:\n\nNo native concept of a “project” beyond RStudio projects.\n\nQuarto:\n\nSupports Quarto Projects: collections of documents with shared configuration.\nIdeal for books, blogs, websites, and multi-document workflows.\n\n\n\n\n\n\nQuarto:\n\nMore modern and extensible.\nSupports Lua filters, Markdown extensions, cross-referencing, citations, and interactive widgets.\nBetter support for version control and CI/CD workflows.\n\n\n\n\n\n\n\n\nFeature\nR Markdown\nQuarto\n\n\n\n\nLanguage Support\nPrimarily R\nR, Python, Julia, JS\n\n\nExecution Engine\nknitr\nJupyter / native\n\n\nOutput Formats\nMany\nMore + easier config\n\n\nInteractivity\nLimited\nRich (widgets, JS)\n\n\nProject Support\nBasic\nFull project system\n\n\nExtensibility\nModerate\nHigh\n\n\nIdeal For\nR-centric reports\nMulti-language docs"
  },
  {
    "objectID": "labs/lab1s_quarto.html#yaml-blocks-in-quarto",
    "href": "labs/lab1s_quarto.html#yaml-blocks-in-quarto",
    "title": "Lab 1s - Quarto",
    "section": "",
    "text": "In Quarto, a YAML block is a section at the top of a document that contains metadata and configuration settings. YAML stands for “YAML Ain’t Markup Language”, and it’s used to define things like the document title, author, output format, and more.\n\n\nA YAML block is enclosed by triple dashes (---) at the beginning and end:\n---\ntitle: \"My Analysis Report\"\nauthor: \"Jeffrey Blanchard\"\ndate: \"2025-09-08\"\nformat: html\neditor: visual\n---\nThis block tells Quarto: - The title of the document. - The author name. - The date to display. - The output format (e.g., HTML, PDF, Word). - The editor preference (e.g., visual or source).\n\n\n\nHere are some frequently used fields:\n\n\n\n\n\n\n\nField\nDescription\n\n\n\n\ntitle\nTitle of the document\n\n\nauthor\nAuthor name(s)\n\n\ndate\nDate of publication\n\n\nformat\nOutput format (e.g., html, pdf, docx, revealjs)\n\n\ntoc\nTable of contents (true or false)\n\n\nnumber-sections\nNumber section headings\n\n\ntheme\nVisual theme for HTML or slides\n\n\ncode-fold\nWhether code chunks can be collapsed\n\n\nexecute\nControls code execution (e.g., echo, eval, freeze)\n\n\nbibliography\nPath to .bib file for citations\n\n\nfilters\nLua filters for advanced customization\n\n\n\n\n\n\n---\ntitle: \"Data Exploration\"\nauthor: \"Jeffrey Blanchard\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    theme: cosmo\nexecute:\n  echo: true\n  freeze: auto\n---\nThis configures: - An HTML output with a table of contents. - Collapsible code chunks. - A Bootstrap theme (cosmo). - Code execution settings.\n\n\n\nQuarto YAML is: - More consistent and extensible. - Supports nested configuration (e.g., format.html.toc). - Easier to manage across multi-format outputs (e.g., HTML and PDF from one source).\nIn Quarto, R code chunks are sections of code embedded in your document that get executed when the document is rendered. These chunks are enclosed in triple backticks and start with {r}. You can customize their behavior using chunk options, which control things like whether the code is shown, whether it’s executed, how results are displayed, and more."
  },
  {
    "objectID": "labs/lab1s_quarto.html#r-code-chunks-in-quarto",
    "href": "labs/lab1s_quarto.html#r-code-chunks-in-quarto",
    "title": "Lab 1s - Quarto",
    "section": "",
    "text": "R code\nsummary(cars)\n\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\n\n\nHere’s a categorized list of the most useful options:\n\n\n\n\n\nOption\nDescription\n\n\n\n\neval\nWhether to evaluate the code (TRUE or FALSE)\n\n\necho\nShow the code in the output (TRUE or FALSE)\n\n\ninclude\nInclude both code and output (TRUE or FALSE)\n\n\nerror\nShow errors in output (TRUE or FALSE)\n\n\nwarning\nShow warnings (TRUE or FALSE)\n\n\nmessage\nShow messages (TRUE or FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nresults\nHow to display results (\"markup\", \"asis\", \"hide\")\n\n\nfig.width\nWidth of plots (in inches)\n\n\nfig.height\nHeight of plots (in inches)\n\n\nfig.cap\nCaption for figures\n\n\nfig.align\nAlignment of figures (\"left\", \"center\", \"right\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ncache\nCache results to avoid re-running code\n\n\nfreeze\nFreeze output to avoid re-execution unless explicitly updated\n\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\ntidy\nAutomatically tidy code before execution\n\n\ncollapse\nCollapse code and output together\n\n\ncomment\nPrefix for output lines\n\n\n\n\n\n\n\n\n\n\n\n\nPressure vs Temperature\n\n\n\n\nThis chunk: - Hides the code (echo=FALSE) - Sets figure size - Adds a caption - Names the chunk (pressure-plot) for reference"
  },
  {
    "objectID": "labs/lab1s_quarto.html#acknowledgements",
    "href": "labs/lab1s_quarto.html#acknowledgements",
    "title": "Lab 1s - Quarto",
    "section": "",
    "text": "This lab was created with assistance from UMass Copilot"
  },
  {
    "objectID": "labs/lab2_AI_ggplot.html",
    "href": "labs/lab2_AI_ggplot.html",
    "title": "Learning R with the help of AI tools",
    "section": "",
    "text": "AI won’t take your job, but someone using who knows how to use AI might. Think of AI as a force multiplier. You have to learn to code first before you can use AI to help you. Google recently reported that about 25% of its new code is AI-generated.\nMicrosoft designed Copilot to work off of the latest version of OpenAI’s GPT model, GPT-4,\n\ngithub co-pilot - https://github.com/copilot\ngithub education - https://github.com/education\nRStudio github copilot - https://docs.posit.co/ide/user/ide/guide/tools/copilot.html\nMicrosoft Introduction to GitHub Copilot - https://learn.microsoft.com/en-us/training/modules/introduction-to-github-copilot/\nIntroduction to GitHub CoPilot videos - https://learn.microsoft.com/en-us/shows/introduction-to-github-copilot/\nSet up co-pilot for learning - https://docs.github.com/en/get-started/learning-to-code/setting-up-copilot-for-learning-to-code\nHow to write better prompts for GitHub Copilot - https://github.blog/developer-skills/github/how-to-write-better-prompts-for-github-copilot/\nAI Assisted Coding in RStudio - https://research-it.manchester.ac.uk/news/2024/11/29/ai-assisted-coding-in-rstudio/\nRTutor AI - https://rtutor.ai/\nSyntha AI - https://syntha.ai/code-generators/r\nR Code Generator - https://codingfleet.com/code-generator/r/\nLearning the tidyverse with the help of AI tools - https://www.tidyverse.org/blog/2025/04/learn-tidyverse-ai/\nIntroducing vitals, a toolkit for evaluating LLM products in R - https://www.tidyverse.org/blog/2025/06/vitals-0-1-0/\nUsing AI with R - https://rfortherestofus.com/courses/ai\nBoost Your R Skills with AI - https://artscience.ai/boost-your-r-skills-with-ai/\nBeginner’s Tutorial for the OpenAI API in R - https://tilburg.ai/2024/03/tutorial-openai-api-in-r/\nCodex - https://chatgpt.com/codex\n\nAI Assisted Coding in RStudio - https://research-it.manchester.ac.uk/news/2024/11/29/ai-assisted-coding-in-rstudio/ Integrating OpenAI’s ChatGPT into RStudio is now possible with “Chattr”, “GPT Studio” and “GitHub Copilot”. These new tools will help you find the right functions and commands and to quickly generate code snippets to save you time.\n8 ChatGPT packages for R - https://www.infoworld.com/article/2338386/8-chatgpt-tools-for-r-programming.html\n\nVibe coding https://www.geeksforgeeks.org/techtips/what-is-vibe-coding/\nWhat is vibe coding, exactly? - https://www.technologyreview.com/2025/04/16/1115135/what-is-vibe-coding-exactly/\nWhat Is Vibe Coding? Definition, Tools, Pros, and Cons - https://www.datacamp.com/blog/vibe-coding\nYou can use GitHub and Git to collaborate on work. https://docs.github.com/en/get-started/start-your-journey/about-github-and-git\nUsing co-pilot as your tutor - https://docs.github.com/en/get-started/learning-to-code/setting-up-copilot-for-learning-to-code\nchattr - https://mlverse.github.io/chattr/\n\nBioinformatics and AI * A data-intelligence-intensive bioinformatics copilot system for large-scale omics research and scientific insights - https://academic.oup.com/bib/article/26/4/bbaf312/8196318?login=true * Bioinformatics AI: Driving Future Biological Breakthroughs - https://biologyinsights.com/bioinformatics-ai-driving-future-biological-breakthroughs/"
  },
  {
    "objectID": "labs/lab1s_quarto.html#adding-links-and-figures-in-a-quarto-document",
    "href": "labs/lab1s_quarto.html#adding-links-and-figures-in-a-quarto-document",
    "title": "Lab 1s - Quarto",
    "section": "",
    "text": "Let’s go the the Quarto documentation for Markdown basics and more details on Figures\nIt is important to specific where the figure is located relative to your .qmd file. The path can be relative (giant_virus.jpg) or (images/giant_virus.jpg) or absolute (/home/pi_jlb_umass_edu/images/giant_virus.jpg).\n\n\n\ngiant virus"
  },
  {
    "objectID": "labs/lab1s_quarto.html#exercises",
    "href": "labs/lab1s_quarto.html#exercises",
    "title": "Lab 1s - Quarto",
    "section": "",
    "text": "Create a lab report that has\n\nA link out to an external web site.\nAn image embedded.\nA table of contents using the YAML block\nThe code folded using the YAML block\nA code chunk with plot(cars) in which the plot is sized to a figure width of 3 and height of 2\nA code chunk in which the output, but not the code is in the rendered file."
  }
]