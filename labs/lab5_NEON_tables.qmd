---
title: "Lab 5 : Working with NEON Metagenome Assembled Genomes (MAGs / bins)"
---

## Learning objectives

-   Introduction to the National Ecological Observatory Network
-   Introduction to the JGI and the Integrated Microbial Genomes and Microbiomes (IMG/MER)
-   Creating nicely displayed and interactive tables for reports
-   Wrangling the NEON data

## Background

We will going over the following in class

-   [NEON](https://www.neonscience.org/)
-   [Joint Genome Institute](https://jgi.doe.gov/) and the [Integrated Microbial Genomes and Microbiomes(IMG/MER)](https://img.jgi.doe.gov/cgi-bin/mer/main.cgi)
-   [DOE JGI Metagenome Workflow](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8269246/)
-   [JGI GOLD database](https://gold.jgi.doe.gov/study?id=Gs0166454) summary of our project

## Our Project Space

NEON has produced metagenomic data as data product since 2014. The Joint Genome Institute has recently annotated version all reads prior to 20222 [Gs0144570](https://gold.jgi.doe.gov/study?id=Gs0144570). However, these metagenomes have a low sequencing depth and therefore are difficult to use for assembling bacterial genomes.

Last year JGI and NEON collaborated to produce metagenomes which are ~10-fold deeper which allow for better assemble of reads into gene length and greater fragments.  We will work with the [NEON 2023 and 2024 data Gs0166454](https://gold.jgi.doe.gov/study?id=Gs0166454) study sets.

## On the Computer

```{r, message=FALSE}
library(tidyverse)
library(knitr)
library(janitor)
library(DT)
```

### kable

**Don't display tables with thousands of rows.** If you do you may run out of memory and/or you will generate a very large html file.

By default, Quarto displays data frames and matrixes as they would be in the R terminal (in a monospaced font). You have seen already what they look like. Here is an example for the `iris` data set that is preloaded when you start R. We will make a subset of the table.

```{r}
iris_setosa <- iris |> 
filter(Species == "setosa") |> 
filter(Sepal.Length > 5)
```

To make a table more readable in a report the [knitr::kable](https://bookdown.org/yihui/rmarkdown-cookbook/kable.html) function works nice for simple customizable tables.

```{r}
library(knitr)
kable(iris_setosa)
```

`kable` works for small tables, but even 22 rows is too much to display in a report. If you have larger tables and/or want to make them interactive, the [DT](https://rstudio.github.io/DT/) works well.

### DT

```{r}
library(DT)
datatable(iris_setosa)
```

There are two options for using `datatable` in your R code chunk. (1) Bound the code chunk you want to present by `datatable`

```{r}
datatable(
  iris |> 
    filter(Species == "setosa") |> 
    filter(Sepal.Length > 5)
)
```

Or create a new object

```{r}
iris_setosa <- iris |> 
  filter(Species == "setosa") |> 
  filter(Sepal.Length > 5)

datatable(iris_setosa)
```

### Other popular table making packages

Here are a few other popular table making packages

-   [kableExtra](https://bookdown.org/yihui/rmarkdown-cookbook/kableextra.html)
-   [GT](https://gt.rstudio.com/)
-   [reactable](https://glin.github.io/reactable/articles/examples.html)

### Examples using the NEON data table

Our data that we will work with today can be found by searching metagenome bins associated with GOLD Study ID Gs0161344 [IMG/MER](https://img.jgi.doe.gov/cgi-bin/mer/main.cgi?section=MetagenomeBinSearch&page=searchForm)

A description of the column headers for the file we will work with

-   Bin ID - Metagenome Assemble Genome (MAG) ID
-   Genome Name - The metagenome sample name
-   IMG Genome ID - The metagenome sample ID
-   Bin Quality - An estimate of the quality of the bin or MAG
-   Bin Lineage - Taxonomic lineage using the JGI system
-   GTDB-Tk Taxonomy Lineage - Taxonomic lineage using GTDB
-   Bin Methods - The methods for binning contigs and quality control
-   Created By - The process by which the bins were created
-   Date Added - Date sample/metagenome was added
-   Bin Completeness - An estimate of the completeness of the MAG
-   Bin Contamination - An estimate of the contamination of the MAG
-   Total Number of Bases - MAG size in bases
-   5s rRNA - Count of 5s rRNAs in the MAG
-   16s rRNA - Count of 16S rRNAs in the MAG
-   23s rRNA - Count of 23s rRNAs in the MAG
-   tRNA Genes - Count of tRNA genes in the MAG
-   Gene Count - Count of number of genes in the MAG
-   Scaffold Count - Number of separate scaffold comprising the MAG. The ideal would be 1
-   GOLD Study ID - The ID in the JGI GOLD database

Let's load the table into R

```{r, message=FALSE}
# This is the location used for Github
NEON_MAGs <- read_tsv("../data/NEON_metadata/exported_img_bins_Gs0166454_NEON.tsv")
# This is the locaton used for the class data directory on Unity
# NEON_MAGs <- read_tsv("/work/pi_bio678_umass_edu/data_NEON/exported_img_bins_Gs0166454_NEON.tsv")
```

As always in the Environment window check to see if the table loaded as expect and what the object types are. Or you can do it in your R console

```{r}
head(NEON_MAGs)

str(NEON_MAGs)
```


You might also notice that many columns are surrounded by backticks. That’s because they contain spaces, breaking R’s usual rules for variable names; they’re non-syntactic names. To refer to these variables, you need to surround them with backticks, `.  Last week in Chapter 7 we used janitor::clean_names() to use some heuristics to turn them all into snake case at once.

```{r}
NEON_MAGs <- NEON_MAGs |> janitor::clean_names()
```


Count the number of MQ and HQ genomes

```{r}
NEON_MAGs |> 
  count(bin_quality, sort = TRUE) 
```

Make a `knitr::kable` table of the bin quality counts

```{r}
kable(
  NEON_MAGs |> 
   count(bin_quality) 
)
```

Filter so that Bin Quality = HQ and display in `DT::datatable`

```{r}
datatable(
  NEON_MAGs|> 
    filter(bin_quality == "HQ")
)
```

Select the GTDB taxonomy and the MAGs genome size then filter to all MAGs greater than 10,000,000 bases

```{r}
kable(
NEON_MAGs |> 
  select(c(gtdb_taxonomy_lineage, total_number_of_bases)) |> 
  filter(total_number_of_bases > 10000000)
)
```

We can use the `stringr` package to filter based on a word or string of characters in a column

```{r}
datatable(
NEON_MAGs |> 
  filter(str_detect(gtdb_taxonomy_lineage, 'Bacteroidota'))
)
```

Filter to include only the samples from `Yellowstone NP`

```{r}
datatable(
NEON_MAGs |> 
  filter(str_detect(genome_name, 'Yellowstone NP'))
)
```

Since the the taxonomic categories in `GTDB-Tk Taxonomy Lineage` are separated by the `;` we can use the `separate` function to create new columns for each of the taxonomic categories. The `remove = FALSE` keeps the original `GTDB-Tk Taxonomy Lineage` column

```{r}
NEON_MAGs_tax <- NEON_MAGs |> 
  separate(gtdb_taxonomy_lineage, c("domain", "phylum", "class", "order", "family", "genus"), "; ", remove = FALSE) 
```

Count the number of MAGs for each Phylum and display in `DT::datatable`

```{r}
datatable(
  NEON_MAGs_tax |> 
    count(phylum, sort = TRUE)
)
```

Note that there is one category with no name. This were MAGs that were not annotated by GTDB using the JGI pipline (they are Archaea)

There is a lot of information in `genome_name`. Let's unpack it into separate columns. Note here where the double quotes and grave accents are used

```{r}
NEON_MAGs_tax_sample <- NEON_MAGs_tax |> 
  # Get rid of the the common string "Soil microbial communities from "
  mutate_at("genome_name", str_replace, "Terrestrial soil microbial communities from ", "") |> 
  # Use the first `-` to split the column in two
  separate(genome_name, c("site","sample_name"), " - ") |> 
  # Get rid of the the common string "S-comp-1"
  mutate_at("sample_name", str_replace, "-comp-1", "") |>
  # separate the Sample Name into Site ID and plot info
  separate(sample_name, c("site_ID","subplot.layer.date"), "_", remove = FALSE,) |> 
  # separate the plot info into 3 columns
  separate(`subplot.layer.date`, c("subplot", "layer", "date"), "-") 
```

Check this out in the Environment window to make sure with got it right.

Let's see which Site has the most MAGs

```{r}
datatable(
  NEON_MAGs_tax_sample |> 
    count(site, sort = TRUE)
)
```

## Exercises

### Exercise 1

Use `view(iris)` to see the whole data table. Subset the table based on a different species than was used in the example. Display the table using DT::datatable

### Exercise 2

Display using DT::datatable the NEON MAGs that have at least 1 16S rRNA

### Exercise 3

Display a table of the MAGs from `Lower Tombigbee` with only the columns for the `genome_name`, `gtdb_taxonomy_lineage`, and estimated MAG genome size (`total_number_of_bases`).

### Exercise 4

Display a table with the counts of each class names at `Lyndon B. Johnson National Grasslands`.

### Exercise 5

Display a table with the counts for the Phylum `Actinomycetota` at each Site.
